{"version":3,"sources":["components/paymentformcard/PaymentForm.module.css","pages/pageframe/global/Messages/LoadingAnimation.module.css","container/checkout/CheckOutFlow.module.css","components/datalistsection/ListSection.module.css","components/addressform/AddressForm.module.css","components/formsubmitbutton/SubmitButton.module.css","pages/pageframe/global/user/register/RegisterForm.tsx","generated/graphql.tsx","pages/pageframe/global/user/register/RegisterFlow.tsx","pages/pageframe/global/StyledComponents.tsx","accessToken.ts","pages/pageframe/global/user/login/LoginForm.tsx","pages/pageframe/global/user/login/LoginSection.tsx","pages/homepage/sections/TopSection.tsx","pages/pageframe/global/Messages/LoadingAnimation.tsx","config.ts","pages/pageframe/global/maps/PopUpContent.tsx","pages/pageframe/global/maps/MapMarkerProperty.tsx","pages/pageframe/global/helper/ImageUrlGen.tsx","pages/pageframe/global/maps/MapMarkerSight.tsx","pages/pageframe/global/maps/MapView.tsx","pages/pageframe/global/Messages/MessageView.tsx","pages/pageframe/global/Messages/ErrorMessage.tsx","pages/pageframe/global/maps/MapLoader.tsx","pages/homepage/sections/mapsection/MapSection.tsx","pages/homepage/sections/SignInSection.tsx","pages/homepage/sections/propTeaserSectio/PropertyCard.tsx","pages/homepage/sections/propTeaserSectio/PropertyTeaser.tsx","pages/homepage/sections/propTeaserSectio/PropTeaserSection.tsx","pages/homepage/sections/priceSectio/OfferView.tsx","pages/homepage/sections/priceSectio/PriceSection.tsx","pages/homepage/Homepage.tsx","pages/booking/BookingContext.tsx","pages/booking/myBooking/propertyView/FeaturesBatch.tsx","pages/booking/myBooking/propertyView/PropertySelectionView.tsx","pages/booking/myBooking/actions/BookingButton.tsx","pages/booking/myBooking/datasview/DateSelector.tsx","pages/booking/myBooking/datasview/TravelDatesPicker.tsx","pages/pageframe/global/dialogs/SuccessDialog.tsx","pages/pageframe/global/dialogs/SuccessDialogContent.tsx","pages/pageframe/global/dialogs/DialogIcons.tsx","pages/booking/myBooking/mapview/LargeMapView.tsx","pages/booking/myBooking/actions/ShowMapButton.tsx","pages/booking/myBooking/MyBooking.tsx","pages/booking/propertyList/PropertyViewInfos.tsx","pages/booking/propertyList/PropertyView.tsx","pages/booking/propertyList/PropertyList.tsx","pages/booking/BookingRouter.tsx","pages/pageframe/header/UserMenu.tsx","pages/pageframe/header/Header.tsx","pages/pageframe/footerarea/Style.tsx","pages/pageframe/footerarea/FooterMenu.tsx","pages/pageframe/footerarea/FooterArea.tsx","pages/admin/lists/ListItem.tsx","pages/admin/properties/PropertyList.tsx","pages/admin/form/EditorForm.tsx","pages/pageframe/global/Messages/SucessMessage.tsx","pages/admin/imagehandler/PictureUpload.tsx","pages/admin/imagehandler/ImageList/ImageView.tsx","pages/admin/imagehandler/ImageList/ImageList.tsx","pages/admin/form/Editor.tsx","pages/admin/properties/PropertyObject.tsx","pages/admin/properties/PropertyEditor.tsx","pages/admin/lists/ListItemtest.tsx","pages/admin/lists/TableList.tsx","pages/admin/sights/SightObject.tsx","pages/admin/sights/SightList.tsx","pages/admin/sights/SightEditor.tsx","pages/admin/user/UserList.tsx","pages/admin/bookings/BookingList.tsx","pages/admin/ratings/RatingObject.tsx","pages/admin/ratings/RatingList.tsx","pages/admin/ratings/RatingEditor.tsx","pages/admin/products/ProductObject.tsx","pages/admin/products/ProductList.tsx","pages/admin/products/EditNewProperty.tsx","pages/admin/products/EditProperty.tsx","pages/admin/products/PropertyEditor.tsx","pages/admin/menu/AdminMenu.tsx","pages/pageframe/AuthService.tsx","pages/pageframe/ProtectedRoute.tsx","context/checkoutcontext/CheckoutContext.tsx","context/checkoutcontext/CheckoutStepContext.tsx","components/checkoutnavigation/CheckOutNavigation.tsx","container/checkout/CheckOutFlow.tsx","components/datalistsection/ListSection.tsx","container/checkoutsummary/CheckoutSummary.tsx","components/paymentformcard/PaymentForm.tsx","components/paymentformcard/Payment.tsx","components/formsubmitbutton/index.tsx","components/addressform/index.tsx","container/addresseditor/index.tsx","container/checkout/CheckoutContainer.tsx","pages/checkout/Checkout.tsx","pages/pageframe/Routes.tsx","index.tsx","App.tsx"],"names":["module","exports","RegisterForm","props","style","maxWidth","margin","initialValues","email","password","acceptTerms","onSubmit","registerFormFinished","validationSchema","Yup","shape","required","min","oneOf","values","touched","errors","handleChange","handleBlur","handleSubmit","TextField","error","fullWidth","id","label","value","onChange","onBlur","helperText","type","Typography","fontSize","Checkbox","checked","inputProps","href","Button","variant","display","marginTop","CreateMyBookingDocument","gql","CreateProductDocument","CreatePropertyDocument","SaveRatingDocument","CreateSightDocument","DeleteBookingDocument","DeleteProductDocument","AllBookingsDocument","ProductsDocument","useProductsQuery","baseOptions","ApolloReactHooks","GetAllPropertiesDocument","useGetAllPropertiesQuery","AllRatingsDocument","SightsDocument","BlockedDatesByPropertyDocument","MyBookingDocument","GetProductDocument","useGetProductQuery","GetPropertyDocument","useGetPropertyQuery","GetRatingDocument","GetSightDocument","MeDocument","useMeQuery","UsersDocument","LoginDocument","LogoutDocument","RegisterDocument","UpdateProductDocument","useUpdateProductMutation","RegisterFlow","Register","useState","registerComlete","setregisterComlete","loginFunc","a","variables","username","response","data","SectionContainer","withStyles","root","paddingTop","paddingBottom","Container","SectionContainerDark","backgroundColor","TopSectionContainer","backgroundImage","backgroundRepeat","backgroundSize","textAlign","BgContainer","padding","background","MyBookingArea","width","square","position","top","zIndex","Paper","BasicContentBox","Box","SectionHeader","color","SectionHeaderWhite","WhiteTypo","TopActionButton","textTransform","fontWeight","accessToken","setAccessToken","s","getAccessToken","LoginForm","history","useHistory","Login","setError","update","store","login","push","LoginSection","TopSection","LoadingAnimation","className","styles","CircularProgress","size","message","BASE_BACKEND_URL","process","BACKEND_URL","IMAGE_BASE_URL","I","PROPERTY_IMAGE_UPLOAD_URL","SIGHT_IMAGE_UPLOAD_URL","STRIPE_PUBLIC_KEY","PopUpContent","Props","src","imageUrl","alt","title","height","MapMarkerProperty","property","fullSourceUrl","targetFile","targetUrlWithSize","replace","genFullSourceUrl","images","lat","long","Marker","key","Popup","MapMarkerSight","sight","onClick","MapView","console","log","properties","Map","center","lng","zoom","doubleClickZoom","closePopupOnClick","dragging","zoomSnap","zoomDelta","trackResize","touchZoom","scrollWheelZoom","TileLayer","url","attribution","map","prop","sights","MessageView","severity","show","React","open","setOpen","useEffect","handleClose","event","Snackbar","autoHideDuration","onClose","Alert","ErrorMessage","MapLoader","loading","getAllProperties","MapSection","SignInSection","useStyles","makeStyles","media","cardcontent","PropertyCard","classes","Card","CardActionArea","CardMedia","image","CardContent","gutterBottom","component","location","CardActions","PropertyTeaser","Grid","container","spacing","direction","justify","item","JSON","stringify","PropTeaserSection","justifyContent","PriceTag","ActionButton","MonthTag","marginBottom","OfferView","product","elevation","price","minmonth","x","onOfferClicked","PriceSection","getAllProducts","products","Home","BookingContext","createContext","isActive","selectedProperty","arrivalDate","departureDate","setSelectedPropterty","setArrivalDate","setDepartureDate","setIsActive","FeaturesBatch","children","HotelOutlined","PropertySelectionView","useContext","getProperty","alignItems","xs","subtext","beds_adult","minHeight","alignContent","BookingButton","aktiveBooking","buttonPressedListener","disabled","DateSelector","focusedInput","setFocusedInput","startDatePlaceholderText","endDatePlaceholderText","startDate","startDateId","endDate","endDateId","onDatesChange","end","isDayBlocked","day","blockedDates","length","find","isSame","displayFormat","onFocusChange","isOutsideRange","isBefore","moment","TravelDatesPicker","propId","propertyId","getBlockedDatesFromProperty","date","dateTimeStamp","SuccessDialog","Dialog","keepMounted","aria-labelledby","aria-describedby","buttonText","SuccessDialogContent","marginLeft","marginRight","DialogTitle","DialogContentText","text","sunUmbrella","BeachAccess","LargeMapView","setopen","IconButton","Close","ShowMapButton","openMap","setopenMap","MyBooking","refetch","setShow","useCreateMyBookingMutation","Booking","useDeleteBookingMutation","deleteBooking","clearBookingView","booking","myBooking","dateOfArrival","dateOfDeparture","setBooking","bookingButtonPressed","deleteBook","createBook","bookingId","result","arrival","toISOString","departure","sm","PropertyViewInfos","beds_adults","Rating","name","defaultValue","precision","readOnly","PropertyView","marginY","PropertyList","BookingRouter","setSelectedProp","setArrivalD","setDepartureD","setIsActi","active","Provider","UserMenu","anchorEl","setAnchorEl","logout","client","handleLogoutClicked","clearStore","then","loggedOut","Boolean","Avatar","aria-label","aria-controls","aria-haspopup","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","Header","auth","setAuth","theme","flexGrow","menuButton","button","userId","me","handleLoggedOut","AppBar","Toolbar","edge","FooterSectionHeader","SectionItem","Link","FooterSectionContainer","bottom","FooterMenu","items","link","itemTitle","Footer","headerTitle","ListItem","tagone","tagtwo","tagthree","onDeletClicked","onEditClicked","TableRow","TableCell","path","useRouteMatch","onPropertyEdit","onPropertyDelete","Table","TableBody","EditorForm","enableReinitialize","Object","entries","SuccessMessage","PictureUpload","isUploaded","setIsUploaded","file","setfile","FormData","append","axios","post","headers","onSubmitHandler","render","setFieldValue","files","URL","createObjectURL","ImageView","imageUrlAppendix","sizeAppendix","handleDelete","DeleteForeverOutlined","ImageList","imageUrlApends","index","onDeleteHandler","Editor","entity","entityId","imageuploadurl","onImageDelete","newEntity","indexOf","splice","imagelist","newProperty","creationDate","beds_kids","beds_tent","formatProperty","__typename","undefined","parseFloat","PropertyEditor","useParams","showMessage","setshowMessage","saveProperty","ListItemTest","rowData","fields","onDeleteClicked","field","keyName","TableList","TableContainer","TableHead","newSight","formatSight","SightFields","SightList","onEntityEdit","getAllSights","SightEditor","sightId","useCreateSightMutation","saveSight","getSight","UserList","onEntityDelete","users","BookingList","getAllBookings","Date","toUTCString","newRating","rating","targetId","comment","RatingFields","formatRating","RatingList","getAllRatings","RatingEditor","ratingId","useSaveRatingMutation","saveRating","getRating","formatProduct","now","toDateString","ProductFields","ProductList","deleteProduct","EditNewProperty","updateProduct","getNewProduct","EditProperty","getProduct","ProductEditor","AdminMenu","to","exact","checkAuth","token","exp","jwtDecode","ProtectedRoute","context","state","isLoading","isLoggedIn","this","Component","initialCheckoutCtxt","paymentMethod","address","personData","setProduct","setAddress","setPersonData","setPaymentMethod","CheckoutContext","CheckoutContextProvider","setpproduct","setpaymentMethod","setaddress","setpersonData","useCallback","initValue","CheckoutStepContext","step","setstep","CheckoutStepContextProvider","nextStep","CheckOutNavigation","handleStepClicked","Stepper","activeStep","orientation","stepLabels","Step","StepButton","completed","CheckOutFlow","steps","ListSection","sectionHeader","d","listrow","CheckoutSummary","productData","paymentData","card","brand","last4","base","invalid","PaymentForm","stripe","useStripe","elements","useElements","seterror","preventDefault","Error","cardElement","getElement","CardNumberElement","createPaymentMethod","onDone","options","flex","float","stripePromise","loadStripe","Payment","expanded","setExpanded","panel","isExpanded","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore","ExpansionPanelDetails","SubmitButton","button_field","AddressForm","formik","useFormik","row_elements","streetName","streetNumber","postalCode","town","AddressEditor","addressUpdated","handleSaveAddress","user","street","postalcode","CheckOutContainer","productId","Onboarding","Routes","createMuiTheme","palette","primary","main","secondary","serverConnected","ThemeProvider","minWidth","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","next","bind","complete","catch","unsubscribe","ApolloClient","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","fetch","method","credentials","handleFetch","handleError","err","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM","isloading","setLoading","failed","isFailed","json","document","getElementById"],"mappings":"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","file":"static/js/main.9edf5098.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"PaymentForm_card__22Y32\",\"payment-form\":\"PaymentForm_payment-form__3ogQF\",\"payment-input-line\":\"PaymentForm_payment-input-line__1NFsf\",\"payment-input-field\":\"PaymentForm_payment-input-field__2eo3n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading-message\":\"LoadingAnimation_loading-message__hDgf2\",\"loading-container\":\"LoadingAnimation_loading-container__1Cv5n\",\"loading-image\":\"LoadingAnimation_loading-image__2moDB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkout-frame\":\"CheckOutFlow_checkout-frame__1iLiL\",\"checkout-nav\":\"CheckOutFlow_checkout-nav__Tx3Lq\",\"checkout-content\":\"CheckOutFlow_checkout-content__3NMxn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"ListSection_header__2JM1S\",\"listrow\":\"ListSection_listrow__zygj7\",\"label\":\"ListSection_label__1_pdC\",\"value\":\"ListSection_value__3-VEf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row_elements\":\"AddressForm_row_elements__2KXas\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_field\":\"SubmitButton_button_field__H_YMt\"};","import React from \"react\";\nimport { TextField, Button, Checkbox, Typography} from \"@material-ui/core\";\nimport {Formik} from 'formik'\nimport * as Yup from 'yup'\n\ninterface Props {\n    registerFormFinished: (values: {email: string, password: string}) => void\n}\n\nexport const RegisterForm: React.FC<Props> = (props) => {\n    return (\n        <div style={{maxWidth: '400px', margin: 'auto'}}>\n            <Formik initialValues={{\n                email: \"\",\n                password: \"\",\n                acceptTerms: false\n            }} \n            onSubmit={props.registerFormFinished}\n            validationSchema={Yup.object().shape({\n                email: Yup.string()\n                  .email()\n                  .required(\"Required\"),\n                  password: Yup.string().min(8).required(\"Required\"),\n                  acceptTerms: Yup.bool().oneOf([true]).required()\n              })} >\n                {props => {\n                const {\n                values,\n                touched,\n                errors,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                } = props;\n                return (\n                    <form onSubmit={handleSubmit}>\n                            <TextField \n                                error={errors.email && touched.email\n                                    ? true\n                                    : false\n                                }\n                                fullWidth={true}\n                                id=\"email\" \n                                label=\"Email\"\n                                value={values.email} \n                                onChange={handleChange} \n                                onBlur={handleBlur}\n                                helperText={errors.password && touched.password \n                                    ? \"Gib eine gültige Email-Adresse an.\"\n                                    : \"\"\n                                }\n                            />\n                            <TextField \n                                error={errors.password && touched.password\n                                    ? true\n                                    : false\n                                }\n                                fullWidth={true}\n                                id=\"password\" \n                                label=\"Passwort\"\n                                type=\"password\"\n                                value={values.password} \n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                helperText={errors.password && touched.password \n                                    ? \"Dein Passwort muss mindestens 8 Zeichen lang sein.\"\n                                    : \"\"\n                                }\n                            />\n                            <Typography style={{fontSize: '14px',margin: '8px'}}>\n                            <Checkbox\n                                    checked={values.acceptTerms}\n                                    required={true}\n                                    id=\"acceptTerms\"\n                                    onChange={handleChange}\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\n                                /> Bitte bestätige unsere <a href=\"/\">Nutzungsbedingungen</a> und die <a href=\"/\">Erklärung zum Datenschutz</a>.\n                            </Typography>\n\n                            <Button variant={\"outlined\"} style={{margin: 'auto', display: 'block', marginTop: '24px'}} type=\"submit\">anmelden</Button>                          \n                    </form>);\n            }}\n            </Formik>\n            </div>)\n};","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n};\n\nexport type BaseEntity = {\n   __typename?: 'BaseEntity',\n  id: Scalars['String'],\n  creationDate: Scalars['String'],\n};\n\nexport type BlockedDate = {\n   __typename?: 'BlockedDate',\n  bookingId: Scalars['String'],\n  dateTimeStamp: Scalars['Float'],\n  type: Scalars['Float'],\n};\n\nexport type Booking = {\n   __typename?: 'Booking',\n  id: Scalars['String'],\n  creationDate: Scalars['String'],\n  user?: Maybe<Scalars['String']>,\n  dateOfArrival?: Maybe<Scalars['String']>,\n  dateOfDeparture?: Maybe<Scalars['String']>,\n  propertyId?: Maybe<Scalars['String']>,\n};\n\nexport type BookingInput = {\n  user?: Maybe<Scalars['String']>,\n  dateOfArrival?: Maybe<Scalars['String']>,\n  dateOfDeparture?: Maybe<Scalars['String']>,\n  propertyId?: Maybe<Scalars['String']>,\n};\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse',\n  accessToken: Scalars['String'],\n  user: User,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  updateProduct: Scalars['Boolean'],\n  deleteProduct: Scalars['Boolean'],\n  subscribeToPricePlan: Scalars['Boolean'],\n  addPaymentMethod: Scalars['Boolean'],\n  updateRating: Scalars['Boolean'],\n  deleteRating: Scalars['Boolean'],\n  insertRating: Scalars['Boolean'],\n  updateSight: Scalars['Boolean'],\n  deleteSight: Scalars['Boolean'],\n  insertSight: Scalars['Boolean'],\n  updateBooking: Scalars['Boolean'],\n  deleteBooking: Scalars['Boolean'],\n  createBooking: Scalars['Boolean'],\n  updateProperty: Scalars['Boolean'],\n  deleteProperty: Scalars['Boolean'],\n  insertProperty: Scalars['Boolean'],\n  logout: Scalars['Boolean'],\n  revokeRefreshTokeForUser: Scalars['Boolean'],\n  createPaymentServiceCustomer: Scalars['Boolean'],\n  login: LoginResponse,\n  register: Scalars['Boolean'],\n  updateUserName: Scalars['Boolean'],\n  updateUserAddress: Scalars['Boolean'],\n};\n\n\nexport type MutationUpdateProductArgs = {\n  product: ProductInput\n};\n\n\nexport type MutationDeleteProductArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationSubscribeToPricePlanArgs = {\n  priceplan: Scalars['String']\n};\n\n\nexport type MutationAddPaymentMethodArgs = {\n  paymentMethodId: Scalars['String']\n};\n\n\nexport type MutationUpdateRatingArgs = {\n  rating: RatingInput\n};\n\n\nexport type MutationDeleteRatingArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationInsertRatingArgs = {\n  rating: RatingInput\n};\n\n\nexport type MutationUpdateSightArgs = {\n  sight: SightInput\n};\n\n\nexport type MutationDeleteSightArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationInsertSightArgs = {\n  sight: SightInput\n};\n\n\nexport type MutationUpdateBookingArgs = {\n  booking: BookingInput\n};\n\n\nexport type MutationDeleteBookingArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationCreateBookingArgs = {\n  propertyId: Scalars['String'],\n  departure: Scalars['String'],\n  arrival: Scalars['String']\n};\n\n\nexport type MutationUpdatePropertyArgs = {\n  property: PropertyInput\n};\n\n\nexport type MutationDeletePropertyArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationInsertPropertyArgs = {\n  property: PropertyInput\n};\n\n\nexport type MutationRevokeRefreshTokeForUserArgs = {\n  userId: Scalars['String']\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationRegisterArgs = {\n  password: Scalars['String'],\n  email: Scalars['String'],\n  username: Scalars['String']\n};\n\n\nexport type MutationUpdateUserNameArgs = {\n  username: UserName\n};\n\n\nexport type MutationUpdateUserAddressArgs = {\n  useraddress: UserAddress\n};\n\nexport type Product = {\n   __typename?: 'Product',\n  id: Scalars['String'],\n  creationDate: Scalars['String'],\n  title?: Maybe<Scalars['String']>,\n  paymentPricePlan?: Maybe<Scalars['String']>,\n  price?: Maybe<Scalars['Float']>,\n  minmonth?: Maybe<Scalars['Float']>,\n  active?: Maybe<Scalars['Boolean']>,\n};\n\nexport type ProductInput = {\n  title?: Maybe<Scalars['String']>,\n  paymentPricePlan?: Maybe<Scalars['String']>,\n  price?: Maybe<Scalars['Float']>,\n  minmonth?: Maybe<Scalars['Float']>,\n  active?: Maybe<Scalars['Boolean']>,\n};\n\nexport type Property = {\n   __typename?: 'Property',\n  id: Scalars['String'],\n  creationDate: Scalars['String'],\n  title?: Maybe<Scalars['String']>,\n  subtext?: Maybe<Scalars['String']>,\n  location?: Maybe<Scalars['String']>,\n  long?: Maybe<Scalars['Float']>,\n  lat?: Maybe<Scalars['Float']>,\n  beds_adult?: Maybe<Scalars['Float']>,\n  beds_kids?: Maybe<Scalars['Float']>,\n  beds_tent?: Maybe<Scalars['Float']>,\n  images: Array<Scalars['String']>,\n};\n\nexport type PropertyInput = {\n  title?: Maybe<Scalars['String']>,\n  subtext?: Maybe<Scalars['String']>,\n  location?: Maybe<Scalars['String']>,\n  long?: Maybe<Scalars['Float']>,\n  lat?: Maybe<Scalars['Float']>,\n  beds_adult?: Maybe<Scalars['Float']>,\n  beds_kids?: Maybe<Scalars['Float']>,\n  beds_tent?: Maybe<Scalars['Float']>,\n  images: Array<Scalars['String']>,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  getProduct?: Maybe<Product>,\n  getNewProduct: Product,\n  getAllProducts?: Maybe<Array<Product>>,\n  getRating?: Maybe<Rating>,\n  getNewRating: Rating,\n  getAllRatings?: Maybe<Array<Rating>>,\n  getRatingValuesByTarget?: Maybe<RatingValues>,\n  getSight?: Maybe<Sight>,\n  getNewSight: Sight,\n  getAllSights?: Maybe<Array<Sight>>,\n  getBooking?: Maybe<Booking>,\n  myBooking?: Maybe<Booking>,\n  getNewBooking: Booking,\n  getAllBookings?: Maybe<Array<Booking>>,\n  getBlockedDatesFromProperty?: Maybe<Array<BlockedDate>>,\n  propertiesEvalable?: Maybe<Array<Booking>>,\n  getProperty?: Maybe<Property>,\n  getNewProperty: Property,\n  getAllProperties?: Maybe<Array<Property>>,\n  me?: Maybe<User>,\n  users: Array<User>,\n};\n\n\nexport type QueryGetProductArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryGetRatingArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryGetRatingValuesByTargetArgs = {\n  targetId: Scalars['String']\n};\n\n\nexport type QueryGetSightArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryGetBookingArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryGetBlockedDatesFromPropertyArgs = {\n  propertyId: Scalars['String']\n};\n\n\nexport type QueryPropertiesEvalableArgs = {\n  to: Scalars['Float'],\n  from: Scalars['Float']\n};\n\n\nexport type QueryGetPropertyArgs = {\n  id: Scalars['String']\n};\n\nexport type Rating = {\n   __typename?: 'Rating',\n  id: Scalars['String'],\n  creationDate: Scalars['String'],\n  title?: Maybe<Scalars['String']>,\n  targetId: Scalars['Float'],\n  rating?: Maybe<Scalars['Float']>,\n  userId?: Maybe<Scalars['Float']>,\n  comment?: Maybe<Scalars['String']>,\n};\n\nexport type RatingInput = {\n  title?: Maybe<Scalars['String']>,\n  targetId: Scalars['Float'],\n  rating?: Maybe<Scalars['Float']>,\n  userId?: Maybe<Scalars['Float']>,\n  comment?: Maybe<Scalars['String']>,\n};\n\nexport type RatingValues = {\n   __typename?: 'RatingValues',\n  targettype: Scalars['String'],\n  targetId: Scalars['Float'],\n  ratings: Scalars['Float'],\n  ratingValue: Scalars['Float'],\n};\n\nexport type Sight = {\n   __typename?: 'Sight',\n  id: Scalars['String'],\n  creationDate: Scalars['String'],\n  title?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  subtext?: Maybe<Scalars['String']>,\n  location?: Maybe<Scalars['String']>,\n  long?: Maybe<Scalars['Float']>,\n  lat?: Maybe<Scalars['Float']>,\n  images: Array<Scalars['String']>,\n};\n\nexport type SightInput = {\n  title?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  subtext?: Maybe<Scalars['String']>,\n  location?: Maybe<Scalars['String']>,\n  long?: Maybe<Scalars['Float']>,\n  lat?: Maybe<Scalars['Float']>,\n  images: Array<Scalars['String']>,\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['String'],\n  creationDate: Scalars['String'],\n  username?: Maybe<Scalars['String']>,\n  email?: Maybe<Scalars['String']>,\n  paymentServiceId?: Maybe<Scalars['String']>,\n  gender?: Maybe<Scalars['String']>,\n  firstname?: Maybe<Scalars['String']>,\n  surname?: Maybe<Scalars['String']>,\n  street?: Maybe<Scalars['String']>,\n  streetNumber?: Maybe<Scalars['String']>,\n  town?: Maybe<Scalars['String']>,\n  postalcode?: Maybe<Scalars['String']>,\n  tokenVersion?: Maybe<Scalars['Float']>,\n  email_verified: Scalars['Boolean'],\n};\n\nexport type UserAddress = {\n  streetName: Scalars['String'],\n  streetNumber: Scalars['String'],\n  postalCode: Scalars['String'],\n  town: Scalars['String'],\n};\n\nexport type UserName = {\n  gender: Scalars['String'],\n  firstName: Scalars['String'],\n  surname: Scalars['String'],\n};\n\nexport type CreateMyBookingMutationVariables = {\n  arrival: Scalars['String'],\n  departure: Scalars['String'],\n  propertyId: Scalars['String']\n};\n\n\nexport type CreateMyBookingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createBooking'>\n);\n\nexport type CreateProductQueryVariables = {};\n\n\nexport type CreateProductQuery = (\n  { __typename?: 'Query' }\n  & { getNewProduct: (\n    { __typename?: 'Product' }\n    & Pick<Product, 'id' | 'title' | 'creationDate' | 'paymentPricePlan' | 'price' | 'minmonth' | 'active'>\n  ) }\n);\n\nexport type CreatePropertyMutationVariables = {\n  property: PropertyInput\n};\n\n\nexport type CreatePropertyMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'insertProperty'>\n);\n\nexport type SaveRatingMutationVariables = {\n  rating: RatingInput\n};\n\n\nexport type SaveRatingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'insertRating'>\n);\n\nexport type CreateSightMutationVariables = {\n  sight: SightInput\n};\n\n\nexport type CreateSightMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'insertSight'>\n);\n\nexport type DeleteBookingMutationVariables = {\n  bookingId: Scalars['String']\n};\n\n\nexport type DeleteBookingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteBooking'>\n);\n\nexport type DeleteProductMutationVariables = {\n  id: Scalars['String']\n};\n\n\nexport type DeleteProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProduct'>\n);\n\nexport type DeletePropertyMutationVariables = {\n  id: Scalars['String']\n};\n\n\nexport type DeletePropertyMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProperty'>\n);\n\nexport type AllBookingsQueryVariables = {};\n\n\nexport type AllBookingsQuery = (\n  { __typename?: 'Query' }\n  & { getAllBookings: Maybe<Array<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'creationDate' | 'id' | 'dateOfArrival' | 'dateOfDeparture' | 'propertyId'>\n  )>> }\n);\n\nexport type ProductsQueryVariables = {};\n\n\nexport type ProductsQuery = (\n  { __typename?: 'Query' }\n  & { getAllProducts: Maybe<Array<(\n    { __typename?: 'Product' }\n    & Pick<Product, 'id' | 'title' | 'creationDate' | 'paymentPricePlan' | 'price' | 'minmonth' | 'active'>\n  )>> }\n);\n\nexport type GetAllPropertiesQueryVariables = {};\n\n\nexport type GetAllPropertiesQuery = (\n  { __typename?: 'Query' }\n  & { getAllProperties: Maybe<Array<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id' | 'creationDate' | 'title' | 'subtext' | 'location' | 'long' | 'lat' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'images'>\n  )>> }\n);\n\nexport type AllRatingsQueryVariables = {};\n\n\nexport type AllRatingsQuery = (\n  { __typename?: 'Query' }\n  & { getAllRatings: Maybe<Array<(\n    { __typename?: 'Rating' }\n    & Pick<Rating, 'id' | 'creationDate' | 'targetId' | 'comment' | 'rating' | 'title' | 'userId'>\n  )>> }\n);\n\nexport type SightsQueryVariables = {};\n\n\nexport type SightsQuery = (\n  { __typename?: 'Query' }\n  & { getAllSights: Maybe<Array<(\n    { __typename?: 'Sight' }\n    & Pick<Sight, 'id' | 'creationDate' | 'title' | 'type' | 'subtext' | 'location' | 'long' | 'lat' | 'images'>\n  )>> }\n);\n\nexport type BlockedDatesByPropertyQueryVariables = {\n  propertyId: Scalars['String']\n};\n\n\nexport type BlockedDatesByPropertyQuery = (\n  { __typename?: 'Query' }\n  & { getBlockedDatesFromProperty: Maybe<Array<(\n    { __typename?: 'BlockedDate' }\n    & Pick<BlockedDate, 'bookingId' | 'dateTimeStamp' | 'type'>\n  )>> }\n);\n\nexport type MyBookingQueryVariables = {};\n\n\nexport type MyBookingQuery = (\n  { __typename?: 'Query' }\n  & { myBooking: Maybe<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'id' | 'dateOfArrival' | 'dateOfDeparture' | 'propertyId'>\n  )> }\n);\n\nexport type GetProductQueryVariables = {\n  id: Scalars['String']\n};\n\n\nexport type GetProductQuery = (\n  { __typename?: 'Query' }\n  & { getProduct: Maybe<(\n    { __typename?: 'Product' }\n    & Pick<Product, 'id' | 'title' | 'creationDate' | 'paymentPricePlan' | 'price' | 'minmonth' | 'active'>\n  )> }\n);\n\nexport type GetPropertyQueryVariables = {\n  id: Scalars['String']\n};\n\n\nexport type GetPropertyQuery = (\n  { __typename?: 'Query' }\n  & { getProperty: Maybe<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id' | 'creationDate' | 'title' | 'subtext' | 'location' | 'long' | 'lat' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'images'>\n  )> }\n);\n\nexport type GetRatingQueryVariables = {\n  id: Scalars['String']\n};\n\n\nexport type GetRatingQuery = (\n  { __typename?: 'Query' }\n  & { getRating: Maybe<(\n    { __typename?: 'Rating' }\n    & Pick<Rating, 'id' | 'creationDate' | 'targetId' | 'comment' | 'rating' | 'title' | 'userId'>\n  )> }\n);\n\nexport type GetRatingValuesByTargetQueryVariables = {\n  targetId: Scalars['String']\n};\n\n\nexport type GetRatingValuesByTargetQuery = (\n  { __typename?: 'Query' }\n  & { getRatingValuesByTarget: Maybe<(\n    { __typename?: 'RatingValues' }\n    & Pick<RatingValues, 'targetId' | 'ratings' | 'ratingValue'>\n  )> }\n);\n\nexport type GetSightQueryVariables = {\n  id: Scalars['String']\n};\n\n\nexport type GetSightQuery = (\n  { __typename?: 'Query' }\n  & { getSight: Maybe<(\n    { __typename?: 'Sight' }\n    & Pick<Sight, 'id' | 'creationDate' | 'title' | 'type' | 'subtext' | 'location' | 'long' | 'lat' | 'images'>\n  )> }\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'email' | 'creationDate' | 'id' | 'paymentServiceId' | 'gender' | 'firstname' | 'surname' | 'street' | 'streetNumber' | 'postalcode' | 'town'>\n  )> }\n);\n\nexport type UsersQueryVariables = {};\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email'>\n  )> }\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'email' | 'paymentServiceId'>\n    ) }\n  ) }\n);\n\nexport type LogoutMutationVariables = {};\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type AddPaymentMethodMutationVariables = {\n  paymentMethodId: Scalars['String']\n};\n\n\nexport type AddPaymentMethodMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addPaymentMethod'>\n);\n\nexport type CreatePaymentCustomerMutationVariables = {};\n\n\nexport type CreatePaymentCustomerMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createPaymentServiceCustomer'>\n);\n\nexport type SubscribeToPricePlanMutationVariables = {\n  priceplan: Scalars['String']\n};\n\n\nexport type SubscribeToPricePlanMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'subscribeToPricePlan'>\n);\n\nexport type RegisterMutationVariables = {\n  username: Scalars['String'],\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\nexport type UpdateProductMutationVariables = {\n  product: ProductInput\n};\n\n\nexport type UpdateProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateProduct'>\n);\n\nexport type UpdatePropertyMutationVariables = {\n  property: PropertyInput\n};\n\n\nexport type UpdatePropertyMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateProperty'>\n);\n\n\nexport const CreateMyBookingDocument = gql`\n    mutation CreateMyBooking($arrival: String!, $departure: String!, $propertyId: String!) {\n  createBooking(arrival: $arrival, departure: $departure, propertyId: $propertyId)\n}\n    `;\nexport type CreateMyBookingMutationFn = ApolloReactCommon.MutationFunction<CreateMyBookingMutation, CreateMyBookingMutationVariables>;\n\n/**\n * __useCreateMyBookingMutation__\n *\n * To run a mutation, you first call `useCreateMyBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMyBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMyBookingMutation, { data, loading, error }] = useCreateMyBookingMutation({\n *   variables: {\n *      arrival: // value for 'arrival'\n *      departure: // value for 'departure'\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useCreateMyBookingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateMyBookingMutation, CreateMyBookingMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateMyBookingMutation, CreateMyBookingMutationVariables>(CreateMyBookingDocument, baseOptions);\n      }\nexport type CreateMyBookingMutationHookResult = ReturnType<typeof useCreateMyBookingMutation>;\nexport type CreateMyBookingMutationResult = ApolloReactCommon.MutationResult<CreateMyBookingMutation>;\nexport type CreateMyBookingMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateMyBookingMutation, CreateMyBookingMutationVariables>;\nexport const CreateProductDocument = gql`\n    query createProduct {\n  getNewProduct {\n    id\n    title\n    creationDate\n    paymentPricePlan\n    price\n    minmonth\n    active\n  }\n}\n    `;\n\n/**\n * __useCreateProductQuery__\n *\n * To run a query within a React component, call `useCreateProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useCreateProductQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCreateProductQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCreateProductQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CreateProductQuery, CreateProductQueryVariables>) {\n        return ApolloReactHooks.useQuery<CreateProductQuery, CreateProductQueryVariables>(CreateProductDocument, baseOptions);\n      }\nexport function useCreateProductLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CreateProductQuery, CreateProductQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CreateProductQuery, CreateProductQueryVariables>(CreateProductDocument, baseOptions);\n        }\nexport type CreateProductQueryHookResult = ReturnType<typeof useCreateProductQuery>;\nexport type CreateProductLazyQueryHookResult = ReturnType<typeof useCreateProductLazyQuery>;\nexport type CreateProductQueryResult = ApolloReactCommon.QueryResult<CreateProductQuery, CreateProductQueryVariables>;\nexport const CreatePropertyDocument = gql`\n    mutation createProperty($property: PropertyInput!) {\n  insertProperty(property: $property)\n}\n    `;\nexport type CreatePropertyMutationFn = ApolloReactCommon.MutationFunction<CreatePropertyMutation, CreatePropertyMutationVariables>;\n\n/**\n * __useCreatePropertyMutation__\n *\n * To run a mutation, you first call `useCreatePropertyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePropertyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPropertyMutation, { data, loading, error }] = useCreatePropertyMutation({\n *   variables: {\n *      property: // value for 'property'\n *   },\n * });\n */\nexport function useCreatePropertyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreatePropertyMutation, CreatePropertyMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreatePropertyMutation, CreatePropertyMutationVariables>(CreatePropertyDocument, baseOptions);\n      }\nexport type CreatePropertyMutationHookResult = ReturnType<typeof useCreatePropertyMutation>;\nexport type CreatePropertyMutationResult = ApolloReactCommon.MutationResult<CreatePropertyMutation>;\nexport type CreatePropertyMutationOptions = ApolloReactCommon.BaseMutationOptions<CreatePropertyMutation, CreatePropertyMutationVariables>;\nexport const SaveRatingDocument = gql`\n    mutation saveRating($rating: RatingInput!) {\n  insertRating(rating: $rating)\n}\n    `;\nexport type SaveRatingMutationFn = ApolloReactCommon.MutationFunction<SaveRatingMutation, SaveRatingMutationVariables>;\n\n/**\n * __useSaveRatingMutation__\n *\n * To run a mutation, you first call `useSaveRatingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveRatingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveRatingMutation, { data, loading, error }] = useSaveRatingMutation({\n *   variables: {\n *      rating: // value for 'rating'\n *   },\n * });\n */\nexport function useSaveRatingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveRatingMutation, SaveRatingMutationVariables>) {\n        return ApolloReactHooks.useMutation<SaveRatingMutation, SaveRatingMutationVariables>(SaveRatingDocument, baseOptions);\n      }\nexport type SaveRatingMutationHookResult = ReturnType<typeof useSaveRatingMutation>;\nexport type SaveRatingMutationResult = ApolloReactCommon.MutationResult<SaveRatingMutation>;\nexport type SaveRatingMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveRatingMutation, SaveRatingMutationVariables>;\nexport const CreateSightDocument = gql`\n    mutation createSight($sight: SightInput!) {\n  insertSight(sight: $sight)\n}\n    `;\nexport type CreateSightMutationFn = ApolloReactCommon.MutationFunction<CreateSightMutation, CreateSightMutationVariables>;\n\n/**\n * __useCreateSightMutation__\n *\n * To run a mutation, you first call `useCreateSightMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSightMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSightMutation, { data, loading, error }] = useCreateSightMutation({\n *   variables: {\n *      sight: // value for 'sight'\n *   },\n * });\n */\nexport function useCreateSightMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateSightMutation, CreateSightMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateSightMutation, CreateSightMutationVariables>(CreateSightDocument, baseOptions);\n      }\nexport type CreateSightMutationHookResult = ReturnType<typeof useCreateSightMutation>;\nexport type CreateSightMutationResult = ApolloReactCommon.MutationResult<CreateSightMutation>;\nexport type CreateSightMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateSightMutation, CreateSightMutationVariables>;\nexport const DeleteBookingDocument = gql`\n    mutation deleteBooking($bookingId: String!) {\n  deleteBooking(id: $bookingId)\n}\n    `;\nexport type DeleteBookingMutationFn = ApolloReactCommon.MutationFunction<DeleteBookingMutation, DeleteBookingMutationVariables>;\n\n/**\n * __useDeleteBookingMutation__\n *\n * To run a mutation, you first call `useDeleteBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteBookingMutation, { data, loading, error }] = useDeleteBookingMutation({\n *   variables: {\n *      bookingId: // value for 'bookingId'\n *   },\n * });\n */\nexport function useDeleteBookingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteBookingMutation, DeleteBookingMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteBookingMutation, DeleteBookingMutationVariables>(DeleteBookingDocument, baseOptions);\n      }\nexport type DeleteBookingMutationHookResult = ReturnType<typeof useDeleteBookingMutation>;\nexport type DeleteBookingMutationResult = ApolloReactCommon.MutationResult<DeleteBookingMutation>;\nexport type DeleteBookingMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteBookingMutation, DeleteBookingMutationVariables>;\nexport const DeleteProductDocument = gql`\n    mutation deleteProduct($id: String!) {\n  deleteProduct(id: $id)\n}\n    `;\nexport type DeleteProductMutationFn = ApolloReactCommon.MutationFunction<DeleteProductMutation, DeleteProductMutationVariables>;\n\n/**\n * __useDeleteProductMutation__\n *\n * To run a mutation, you first call `useDeleteProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProductMutation, { data, loading, error }] = useDeleteProductMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProductMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProductMutation, DeleteProductMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteProductMutation, DeleteProductMutationVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductMutationHookResult = ReturnType<typeof useDeleteProductMutation>;\nexport type DeleteProductMutationResult = ApolloReactCommon.MutationResult<DeleteProductMutation>;\nexport type DeleteProductMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProductMutation, DeleteProductMutationVariables>;\nexport const DeletePropertyDocument = gql`\n    mutation deleteProperty($id: String!) {\n  deleteProperty(id: $id)\n}\n    `;\nexport type DeletePropertyMutationFn = ApolloReactCommon.MutationFunction<DeletePropertyMutation, DeletePropertyMutationVariables>;\n\n/**\n * __useDeletePropertyMutation__\n *\n * To run a mutation, you first call `useDeletePropertyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePropertyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePropertyMutation, { data, loading, error }] = useDeletePropertyMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeletePropertyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeletePropertyMutation, DeletePropertyMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeletePropertyMutation, DeletePropertyMutationVariables>(DeletePropertyDocument, baseOptions);\n      }\nexport type DeletePropertyMutationHookResult = ReturnType<typeof useDeletePropertyMutation>;\nexport type DeletePropertyMutationResult = ApolloReactCommon.MutationResult<DeletePropertyMutation>;\nexport type DeletePropertyMutationOptions = ApolloReactCommon.BaseMutationOptions<DeletePropertyMutation, DeletePropertyMutationVariables>;\nexport const AllBookingsDocument = gql`\n    query allBookings {\n  getAllBookings {\n    creationDate\n    id\n    dateOfArrival\n    dateOfDeparture\n    propertyId\n  }\n}\n    `;\n\n/**\n * __useAllBookingsQuery__\n *\n * To run a query within a React component, call `useAllBookingsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllBookingsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllBookingsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllBookingsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllBookingsQuery, AllBookingsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllBookingsQuery, AllBookingsQueryVariables>(AllBookingsDocument, baseOptions);\n      }\nexport function useAllBookingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllBookingsQuery, AllBookingsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllBookingsQuery, AllBookingsQueryVariables>(AllBookingsDocument, baseOptions);\n        }\nexport type AllBookingsQueryHookResult = ReturnType<typeof useAllBookingsQuery>;\nexport type AllBookingsLazyQueryHookResult = ReturnType<typeof useAllBookingsLazyQuery>;\nexport type AllBookingsQueryResult = ApolloReactCommon.QueryResult<AllBookingsQuery, AllBookingsQueryVariables>;\nexport const ProductsDocument = gql`\n    query Products {\n  getAllProducts {\n    id\n    title\n    creationDate\n    paymentPricePlan\n    price\n    minmonth\n    active\n  }\n}\n    `;\n\n/**\n * __useProductsQuery__\n *\n * To run a query within a React component, call `useProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProductsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsQuery, ProductsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);\n      }\nexport function useProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsQuery, ProductsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);\n        }\nexport type ProductsQueryHookResult = ReturnType<typeof useProductsQuery>;\nexport type ProductsLazyQueryHookResult = ReturnType<typeof useProductsLazyQuery>;\nexport type ProductsQueryResult = ApolloReactCommon.QueryResult<ProductsQuery, ProductsQueryVariables>;\nexport const GetAllPropertiesDocument = gql`\n    query getAllProperties {\n  getAllProperties {\n    id\n    creationDate\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n\n/**\n * __useGetAllPropertiesQuery__\n *\n * To run a query within a React component, call `useGetAllPropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllPropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllPropertiesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllPropertiesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllPropertiesQuery, GetAllPropertiesQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetAllPropertiesQuery, GetAllPropertiesQueryVariables>(GetAllPropertiesDocument, baseOptions);\n      }\nexport function useGetAllPropertiesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllPropertiesQuery, GetAllPropertiesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetAllPropertiesQuery, GetAllPropertiesQueryVariables>(GetAllPropertiesDocument, baseOptions);\n        }\nexport type GetAllPropertiesQueryHookResult = ReturnType<typeof useGetAllPropertiesQuery>;\nexport type GetAllPropertiesLazyQueryHookResult = ReturnType<typeof useGetAllPropertiesLazyQuery>;\nexport type GetAllPropertiesQueryResult = ApolloReactCommon.QueryResult<GetAllPropertiesQuery, GetAllPropertiesQueryVariables>;\nexport const AllRatingsDocument = gql`\n    query AllRatings {\n  getAllRatings {\n    id\n    creationDate\n    targetId\n    comment\n    rating\n    title\n    userId\n  }\n}\n    `;\n\n/**\n * __useAllRatingsQuery__\n *\n * To run a query within a React component, call `useAllRatingsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllRatingsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllRatingsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllRatingsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllRatingsQuery, AllRatingsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllRatingsQuery, AllRatingsQueryVariables>(AllRatingsDocument, baseOptions);\n      }\nexport function useAllRatingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllRatingsQuery, AllRatingsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllRatingsQuery, AllRatingsQueryVariables>(AllRatingsDocument, baseOptions);\n        }\nexport type AllRatingsQueryHookResult = ReturnType<typeof useAllRatingsQuery>;\nexport type AllRatingsLazyQueryHookResult = ReturnType<typeof useAllRatingsLazyQuery>;\nexport type AllRatingsQueryResult = ApolloReactCommon.QueryResult<AllRatingsQuery, AllRatingsQueryVariables>;\nexport const SightsDocument = gql`\n    query Sights {\n  getAllSights {\n    id\n    creationDate\n    title\n    type\n    subtext\n    location\n    long\n    lat\n    images\n  }\n}\n    `;\n\n/**\n * __useSightsQuery__\n *\n * To run a query within a React component, call `useSightsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSightsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSightsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useSightsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SightsQuery, SightsQueryVariables>) {\n        return ApolloReactHooks.useQuery<SightsQuery, SightsQueryVariables>(SightsDocument, baseOptions);\n      }\nexport function useSightsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SightsQuery, SightsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SightsQuery, SightsQueryVariables>(SightsDocument, baseOptions);\n        }\nexport type SightsQueryHookResult = ReturnType<typeof useSightsQuery>;\nexport type SightsLazyQueryHookResult = ReturnType<typeof useSightsLazyQuery>;\nexport type SightsQueryResult = ApolloReactCommon.QueryResult<SightsQuery, SightsQueryVariables>;\nexport const BlockedDatesByPropertyDocument = gql`\n    query blockedDatesByProperty($propertyId: String!) {\n  getBlockedDatesFromProperty(propertyId: $propertyId) {\n    bookingId\n    dateTimeStamp\n    type\n  }\n}\n    `;\n\n/**\n * __useBlockedDatesByPropertyQuery__\n *\n * To run a query within a React component, call `useBlockedDatesByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBlockedDatesByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBlockedDatesByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useBlockedDatesByPropertyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>) {\n        return ApolloReactHooks.useQuery<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>(BlockedDatesByPropertyDocument, baseOptions);\n      }\nexport function useBlockedDatesByPropertyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>(BlockedDatesByPropertyDocument, baseOptions);\n        }\nexport type BlockedDatesByPropertyQueryHookResult = ReturnType<typeof useBlockedDatesByPropertyQuery>;\nexport type BlockedDatesByPropertyLazyQueryHookResult = ReturnType<typeof useBlockedDatesByPropertyLazyQuery>;\nexport type BlockedDatesByPropertyQueryResult = ApolloReactCommon.QueryResult<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>;\nexport const MyBookingDocument = gql`\n    query MyBooking {\n  myBooking {\n    id\n    dateOfArrival\n    dateOfDeparture\n    propertyId\n  }\n}\n    `;\n\n/**\n * __useMyBookingQuery__\n *\n * To run a query within a React component, call `useMyBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyBookingQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMyBookingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MyBookingQuery, MyBookingQueryVariables>) {\n        return ApolloReactHooks.useQuery<MyBookingQuery, MyBookingQueryVariables>(MyBookingDocument, baseOptions);\n      }\nexport function useMyBookingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MyBookingQuery, MyBookingQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MyBookingQuery, MyBookingQueryVariables>(MyBookingDocument, baseOptions);\n        }\nexport type MyBookingQueryHookResult = ReturnType<typeof useMyBookingQuery>;\nexport type MyBookingLazyQueryHookResult = ReturnType<typeof useMyBookingLazyQuery>;\nexport type MyBookingQueryResult = ApolloReactCommon.QueryResult<MyBookingQuery, MyBookingQueryVariables>;\nexport const GetProductDocument = gql`\n    query getProduct($id: String!) {\n  getProduct(id: $id) {\n    id\n    title\n    creationDate\n    paymentPricePlan\n    price\n    minmonth\n    active\n  }\n}\n    `;\n\n/**\n * __useGetProductQuery__\n *\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetProductQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n      }\nexport function useGetProductLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n        }\nexport type GetProductQueryHookResult = ReturnType<typeof useGetProductQuery>;\nexport type GetProductLazyQueryHookResult = ReturnType<typeof useGetProductLazyQuery>;\nexport type GetProductQueryResult = ApolloReactCommon.QueryResult<GetProductQuery, GetProductQueryVariables>;\nexport const GetPropertyDocument = gql`\n    query getProperty($id: String!) {\n  getProperty(id: $id) {\n    id\n    creationDate\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n\n/**\n * __useGetPropertyQuery__\n *\n * To run a query within a React component, call `useGetPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPropertyQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetPropertyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyQuery, GetPropertyQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetPropertyQuery, GetPropertyQueryVariables>(GetPropertyDocument, baseOptions);\n      }\nexport function useGetPropertyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyQuery, GetPropertyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetPropertyQuery, GetPropertyQueryVariables>(GetPropertyDocument, baseOptions);\n        }\nexport type GetPropertyQueryHookResult = ReturnType<typeof useGetPropertyQuery>;\nexport type GetPropertyLazyQueryHookResult = ReturnType<typeof useGetPropertyLazyQuery>;\nexport type GetPropertyQueryResult = ApolloReactCommon.QueryResult<GetPropertyQuery, GetPropertyQueryVariables>;\nexport const GetRatingDocument = gql`\n    query getRating($id: String!) {\n  getRating(id: $id) {\n    id\n    creationDate\n    targetId\n    comment\n    rating\n    title\n    userId\n  }\n}\n    `;\n\n/**\n * __useGetRatingQuery__\n *\n * To run a query within a React component, call `useGetRatingQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetRatingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRatingQuery, GetRatingQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetRatingQuery, GetRatingQueryVariables>(GetRatingDocument, baseOptions);\n      }\nexport function useGetRatingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRatingQuery, GetRatingQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetRatingQuery, GetRatingQueryVariables>(GetRatingDocument, baseOptions);\n        }\nexport type GetRatingQueryHookResult = ReturnType<typeof useGetRatingQuery>;\nexport type GetRatingLazyQueryHookResult = ReturnType<typeof useGetRatingLazyQuery>;\nexport type GetRatingQueryResult = ApolloReactCommon.QueryResult<GetRatingQuery, GetRatingQueryVariables>;\nexport const GetRatingValuesByTargetDocument = gql`\n    query getRatingValuesByTarget($targetId: String!) {\n  getRatingValuesByTarget(targetId: $targetId) {\n    targetId\n    ratings\n    ratingValue\n  }\n}\n    `;\n\n/**\n * __useGetRatingValuesByTargetQuery__\n *\n * To run a query within a React component, call `useGetRatingValuesByTargetQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingValuesByTargetQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingValuesByTargetQuery({\n *   variables: {\n *      targetId: // value for 'targetId'\n *   },\n * });\n */\nexport function useGetRatingValuesByTargetQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>(GetRatingValuesByTargetDocument, baseOptions);\n      }\nexport function useGetRatingValuesByTargetLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>(GetRatingValuesByTargetDocument, baseOptions);\n        }\nexport type GetRatingValuesByTargetQueryHookResult = ReturnType<typeof useGetRatingValuesByTargetQuery>;\nexport type GetRatingValuesByTargetLazyQueryHookResult = ReturnType<typeof useGetRatingValuesByTargetLazyQuery>;\nexport type GetRatingValuesByTargetQueryResult = ApolloReactCommon.QueryResult<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>;\nexport const GetSightDocument = gql`\n    query getSight($id: String!) {\n  getSight(id: $id) {\n    id\n    creationDate\n    title\n    type\n    subtext\n    location\n    long\n    lat\n    images\n  }\n}\n    `;\n\n/**\n * __useGetSightQuery__\n *\n * To run a query within a React component, call `useGetSightQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSightQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSightQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetSightQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSightQuery, GetSightQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetSightQuery, GetSightQueryVariables>(GetSightDocument, baseOptions);\n      }\nexport function useGetSightLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSightQuery, GetSightQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetSightQuery, GetSightQueryVariables>(GetSightDocument, baseOptions);\n        }\nexport type GetSightQueryHookResult = ReturnType<typeof useGetSightQuery>;\nexport type GetSightLazyQueryHookResult = ReturnType<typeof useGetSightLazyQuery>;\nexport type GetSightQueryResult = ApolloReactCommon.QueryResult<GetSightQuery, GetSightQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    email\n    creationDate\n    id\n    paymentServiceId\n    gender\n    firstname\n    surname\n    street\n    streetNumber\n    postalcode\n    town\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    email\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n      }\nexport function useUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = ApolloReactCommon.QueryResult<UsersQuery, UsersQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n      paymentServiceId\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const AddPaymentMethodDocument = gql`\n    mutation addPaymentMethod($paymentMethodId: String!) {\n  addPaymentMethod(paymentMethodId: $paymentMethodId)\n}\n    `;\nexport type AddPaymentMethodMutationFn = ApolloReactCommon.MutationFunction<AddPaymentMethodMutation, AddPaymentMethodMutationVariables>;\n\n/**\n * __useAddPaymentMethodMutation__\n *\n * To run a mutation, you first call `useAddPaymentMethodMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPaymentMethodMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPaymentMethodMutation, { data, loading, error }] = useAddPaymentMethodMutation({\n *   variables: {\n *      paymentMethodId: // value for 'paymentMethodId'\n *   },\n * });\n */\nexport function useAddPaymentMethodMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddPaymentMethodMutation, AddPaymentMethodMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddPaymentMethodMutation, AddPaymentMethodMutationVariables>(AddPaymentMethodDocument, baseOptions);\n      }\nexport type AddPaymentMethodMutationHookResult = ReturnType<typeof useAddPaymentMethodMutation>;\nexport type AddPaymentMethodMutationResult = ApolloReactCommon.MutationResult<AddPaymentMethodMutation>;\nexport type AddPaymentMethodMutationOptions = ApolloReactCommon.BaseMutationOptions<AddPaymentMethodMutation, AddPaymentMethodMutationVariables>;\nexport const CreatePaymentCustomerDocument = gql`\n    mutation createPaymentCustomer {\n  createPaymentServiceCustomer\n}\n    `;\nexport type CreatePaymentCustomerMutationFn = ApolloReactCommon.MutationFunction<CreatePaymentCustomerMutation, CreatePaymentCustomerMutationVariables>;\n\n/**\n * __useCreatePaymentCustomerMutation__\n *\n * To run a mutation, you first call `useCreatePaymentCustomerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePaymentCustomerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPaymentCustomerMutation, { data, loading, error }] = useCreatePaymentCustomerMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useCreatePaymentCustomerMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreatePaymentCustomerMutation, CreatePaymentCustomerMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreatePaymentCustomerMutation, CreatePaymentCustomerMutationVariables>(CreatePaymentCustomerDocument, baseOptions);\n      }\nexport type CreatePaymentCustomerMutationHookResult = ReturnType<typeof useCreatePaymentCustomerMutation>;\nexport type CreatePaymentCustomerMutationResult = ApolloReactCommon.MutationResult<CreatePaymentCustomerMutation>;\nexport type CreatePaymentCustomerMutationOptions = ApolloReactCommon.BaseMutationOptions<CreatePaymentCustomerMutation, CreatePaymentCustomerMutationVariables>;\nexport const SubscribeToPricePlanDocument = gql`\n    mutation subscribeToPricePlan($priceplan: String!) {\n  subscribeToPricePlan(priceplan: $priceplan)\n}\n    `;\nexport type SubscribeToPricePlanMutationFn = ApolloReactCommon.MutationFunction<SubscribeToPricePlanMutation, SubscribeToPricePlanMutationVariables>;\n\n/**\n * __useSubscribeToPricePlanMutation__\n *\n * To run a mutation, you first call `useSubscribeToPricePlanMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSubscribeToPricePlanMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [subscribeToPricePlanMutation, { data, loading, error }] = useSubscribeToPricePlanMutation({\n *   variables: {\n *      priceplan: // value for 'priceplan'\n *   },\n * });\n */\nexport function useSubscribeToPricePlanMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubscribeToPricePlanMutation, SubscribeToPricePlanMutationVariables>) {\n        return ApolloReactHooks.useMutation<SubscribeToPricePlanMutation, SubscribeToPricePlanMutationVariables>(SubscribeToPricePlanDocument, baseOptions);\n      }\nexport type SubscribeToPricePlanMutationHookResult = ReturnType<typeof useSubscribeToPricePlanMutation>;\nexport type SubscribeToPricePlanMutationResult = ApolloReactCommon.MutationResult<SubscribeToPricePlanMutation>;\nexport type SubscribeToPricePlanMutationOptions = ApolloReactCommon.BaseMutationOptions<SubscribeToPricePlanMutation, SubscribeToPricePlanMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $email: String!, $password: String!) {\n  register(username: $username, email: $email, password: $password)\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const UpdateProductDocument = gql`\n    mutation updateProduct($product: ProductInput!) {\n  updateProduct(product: $product)\n}\n    `;\nexport type UpdateProductMutationFn = ApolloReactCommon.MutationFunction<UpdateProductMutation, UpdateProductMutationVariables>;\n\n/**\n * __useUpdateProductMutation__\n *\n * To run a mutation, you first call `useUpdateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProductMutation, { data, loading, error }] = useUpdateProductMutation({\n *   variables: {\n *      product: // value for 'product'\n *   },\n * });\n */\nexport function useUpdateProductMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateProductMutation, UpdateProductMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateProductMutation, UpdateProductMutationVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductMutationHookResult = ReturnType<typeof useUpdateProductMutation>;\nexport type UpdateProductMutationResult = ApolloReactCommon.MutationResult<UpdateProductMutation>;\nexport type UpdateProductMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateProductMutation, UpdateProductMutationVariables>;\nexport const UpdatePropertyDocument = gql`\n    mutation updateProperty($property: PropertyInput!) {\n  updateProperty(property: $property)\n}\n    `;\nexport type UpdatePropertyMutationFn = ApolloReactCommon.MutationFunction<UpdatePropertyMutation, UpdatePropertyMutationVariables>;\n\n/**\n * __useUpdatePropertyMutation__\n *\n * To run a mutation, you first call `useUpdatePropertyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePropertyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePropertyMutation, { data, loading, error }] = useUpdatePropertyMutation({\n *   variables: {\n *      property: // value for 'property'\n *   },\n * });\n */\nexport function useUpdatePropertyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdatePropertyMutation, UpdatePropertyMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdatePropertyMutation, UpdatePropertyMutationVariables>(UpdatePropertyDocument, baseOptions);\n      }\nexport type UpdatePropertyMutationHookResult = ReturnType<typeof useUpdatePropertyMutation>;\nexport type UpdatePropertyMutationResult = ApolloReactCommon.MutationResult<UpdatePropertyMutation>;\nexport type UpdatePropertyMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdatePropertyMutation, UpdatePropertyMutationVariables>;","import React, { useState } from \"react\";\nimport './styles.css'\nimport { RegisterForm } from \"./RegisterForm\";\nimport { useRegisterMutation } from \"../../../../../generated/graphql\";\nimport { Typography } from \"@material-ui/core\";\n\ninterface Props {\n\n}\n\n\nexport const RegisterFlow: React.FC<Props> = () => {\n\n    const [Register] = useRegisterMutation()\n    const [registerComlete, setregisterComlete] = useState(false)\n\n    const registerFormFinished = (values: {email: string, password: string}) => {\n        loginFunc(values);\n    }\n\n    const loginFunc = async (values: {email: string, password: string}) => {\n        const response = await Register({\n            variables: {\n                email: values.email, \n                password: values.password,\n                username: \"\"\n            }\n        })\n        \n        if(response && response.data){\n            setregisterComlete(true)\n        }\n    }\n    if(registerComlete){\n        return (\n            <Typography>\n                <div>Vielen Dank</div>\n                Wir haben Dir eine Email mit einem Akttivierungslink geschickt. <br/> Bitte aktiviere noch deinen Account.\n            </Typography>\n        )\n    }\n\n\n    return (\n        <RegisterForm registerFormFinished={registerFormFinished}/>\n    )\n};","import { Container, withStyles, Typography, Box, Button, Paper } from \"@material-ui/core\";\n\n  // ####################\n  // #    Container     #\n  // ####################\n\nexport const SectionContainer = withStyles({\n        root: {\n            paddingTop: \"32px\",\n            paddingBottom: \"32px\",\n            margin: '0px',\n            maxWidth: '100%'\n            \n        },\n      })(Container);\n\n  export const SectionContainerDark = withStyles({\n        root: {\n            backgroundColor: '#222222'            \n        },\n      })(SectionContainer);\n\nexport const TopSectionContainer = withStyles({\n        root: {\n            backgroundImage: \"url(/img/header_club_green.png)\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundSize: \"100%\",\n            textAlign: 'center'\n        },\n      })(SectionContainer);    \n\nexport const BgContainer = withStyles({\n  root: {\n      padding: \"0px\",\n      background: \"#f6f6f6\",\n      \n  },\n})(SectionContainer);\n\nexport const MyBookingArea = withStyles({\n  root: {\n      width: \"100%\",\n      paddingTop: \"16px\",\n      paddingBottom: \"8px\",\n      margin: \"0px\",\n      square: true,\n      position: \"sticky\",\n      top: 0,\n      zIndex: 2\n  },\n})(Paper);\n\n  export const BasicContentBox = withStyles({\n    root: {\n        width: '90%',\n        paddingTop: \"16px\",\n        paddingBottom: \"16px\",\n        margin: \"auto\"\n    },\n  })(Box);\n\n  // ####################\n  // #    Typos         #\n  // ####################\n\n  export const SectionHeader = withStyles({\n    root: {\n        color: 'gray',\n        width: '100%',\n        fontSize: '32px',\n        paddingBottom: \"24px\",\n        textAlign: 'center'\n    },\n  })(Typography);\n\n  export const SectionHeaderWhite = withStyles({\n    root: {\n        color: '#FFFFFF',\n    },\n  })(SectionHeader);\n\n  export const WhiteTypo = withStyles(\n    {\n      root: {\n        color: 'white',\n        paddingBottom: '16px'\n      }\n      \n    }\n  )(Typography)\n\n\n\n\n  // ####################\n  // #    oThers        #\n  // ####################\n  export const TopActionButton = withStyles(\n    {\n      root: {\n        fontSize: \"24px\",\n        textTransform: \"none\",\n        fontWeight: \"bold\",\n        color: \"white\"\n      }\n    }\n  )(Button)\n","let accessToken: string = \"\";\n\n\nexport const setAccessToken = (s: string ) => {\n    accessToken = s;\n} \n\n\nexport const getAccessToken = () =>{\n    return accessToken;\n} ","import React, { useState } from \"react\";\nimport { useLoginMutation, MeDocument, MeQuery } from \"../../../../../generated/graphql\";\nimport { setAccessToken } from \"../../../../../accessToken\";\nimport { TextField, Button} from \"@material-ui/core\";\nimport {Formik} from 'formik'\nimport { useHistory } from \"react-router-dom\";\n\ninterface Props {\n\n}\n\nexport const LoginForm: React.FC<Props> = () => {\n    const history = useHistory();\n    const [Login] = useLoginMutation();\n    const [error, setError] = useState()\n\n    const loginFunc = async (values: {email: string, password: string}) => {\n        try{\n            const response = await Login({\n                variables: values,\n                update: (store, {data}) => {\n                    if(!data){\n                        return null;\n                    }\n                    /*\n                    store.writeQuery<MeQuery>({\n                        query: MeDocument,\n                        data: {\n                            me: data.login.user\n                        }\n                    })\n                    */  \n                }\n            })\n            if(response && response.data){\n                setAccessToken(response.data.login.accessToken)\n                history.push('/booking')\n            } \n        } catch(error){\n            setError(true);\n        }\n       \n    }\n\n    return (\n        <div style={{maxWidth: '400px', margin: 'auto'}}>\n            <Formik initialValues={{\n                email: \"\",\n                password: \"\",\n                acceptTerms: false\n            }} \n            onSubmit={loginFunc} >\n                {props => {\n                const {\n                values,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                } = props;\n                return (\n                    <form onSubmit={handleSubmit}>\n                            <TextField \n                                error={error} \n                                fullWidth={true}\n                                id=\"email\" \n                                label=\"Email\"\n                                value={values.email} \n                                onChange={handleChange} \n                                onBlur={handleBlur}\n                            />\n                            <TextField \n                                error={error}\n                                fullWidth={true}\n                                id=\"password\" \n                                label=\"Passwort\"\n                                type=\"password\"\n                                value={values.password} \n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                            <Button variant={\"outlined\"} style={{margin: 'auto', display: 'block', marginTop: '24px'}} type=\"submit\">anmelden</Button>                          \n                    </form>);\n            }}\n            </Formik>\n            </div>)\n};","import React from \"react\";\nimport { SectionContainer, BasicContentBox } from \"../../StyledComponents\";\nimport { LoginForm } from \"./LoginForm\";\n\ninterface Props {\n\n}\n\nexport const LoginSection: React.FC<Props> = () => {\n\n    return (\n        <SectionContainer maxWidth=\"xs\">\n            <BasicContentBox>\n                <LoginForm/>\n            </BasicContentBox>\n        </SectionContainer>\n        )\n};","import React from \"react\";\nimport { TopSectionContainer, BasicContentBox, WhiteTypo, TopActionButton } from \"../../pageframe/global/StyledComponents\";\n\n\ninterface Props {\n\n}\n\n\n\nexport const TopSection: React.FC<Props> = () => {\n\n   return (\n    <TopSectionContainer>\n        <BasicContentBox>\n            <WhiteTypo variant=\"h1\">\n               Jederzeit einchecken und entspannen\n           </WhiteTypo>\n           <WhiteTypo variant=\"h4\">\n               Freizeithäuser im Berliner Umland\n           </WhiteTypo>\n           <TopActionButton variant=\"contained\" color=\"secondary\" href=\"\"> ab 99€/m </TopActionButton>\n        </BasicContentBox>\n    </TopSectionContainer>\n   )\n}","import React from \"react\";\nimport { CircularProgress, Typography } from \"@material-ui/core\";\nimport { BasicContentBox, SectionContainer } from \"../StyledComponents\";\nimport styles from './LoadingAnimation.module.css'\n\ninterface Props {\n   message: string\n}\n\n\n\nexport const LoadingAnimation: React.FC<Props> = (props) => {\n \n   return (\n\n               <div className={styles[\"loading-container\"]}>\n               <CircularProgress size={30} className={styles[\"loading-image\"]}/>\n                  <Typography className={styles[\"loading-message\"]}>\n                     {props.message}\n                  </Typography>\n               </div>\n        \n   )\n}","\nexport const BASE_BACKEND_URL = process.env.BACKEND_URL || \"http://localhost:80/\"\n\n// Image Config\nexport const IMAGE_BASE_URL = process.env.I\n\nexport const IMAGE_SMALL_SIZE_APPENDIX = \"-sm.\"\nexport const IMAGE_LARG_SIZE_APPENDIX = \"-lg.\"\nexport const IMAGE_MEDIUM_SIZE_APPENDIX = \"-md.\"\n\nexport const PROPERTY_IMAGE_UPLOAD_URL = BASE_BACKEND_URL + \"upload/property/image\"\nexport const SIGHT_IMAGE_UPLOAD_URL = BASE_BACKEND_URL + \"upload/sight/image\"\n\nexport const FOOTER_HEIGHT = \"180px\"\n\nexport const MAP_DEFAULT_FOCUS_LAT = 52.840094 // 52.521918 Berlin, \nexport const MAP_DEFAULT_FOCUS_LONG = 13.405500 //13.400000\n\nexport const MAP_ZOOM_LEVEL = 9\n\nexport const STRIPE_PUBLIC_KEY = process.env.STRIPE_PUBLIC_KEY || 'pk_test_QjPME2XYwO7RoQugLdafHJ0600thzl90BO'\n\n\n","import React from \"react\";\n\ninterface Props {\n     title: string\n     imageUrl: string\n}\n\nexport const PopUpContent: React.FC<Props> = (Props) => {\n\n   return (\n       <div style={{display: \"inline\", width: \"100px\"}}>\n           <img \n            src={Props.imageUrl} \n            alt={\"Abbildung \"+Props.title}\n            style={{width: \"100px\", height: \"100px\"}} />\n           \n       </div>\n    )\n}","import React from \"react\";\nimport { Marker, Popup} from 'react-leaflet'\nimport { Property, useGetPropertyQuery} from \"../../../../generated/graphql\";\nimport { PopUpContent } from \"./PopUpContent\";\nimport { genFullSourceUrl } from \"../helper/ImageUrlGen\";\nimport \"./mapstyles.css\"\n\n\ninterface Props {\n     property: Property\n}\n\nexport const MapMarkerProperty: React.FC<Props> = (Props) => {\n\n    const property = Props.property;\n    const fullSourceUrl = genFullSourceUrl(property.images[0], \"small\")\n\n    if(property && property.lat && property.long && property.title){\n        return (\n            <Marker\n                key={property.id}\n                position={[\n                    property.lat || 0,\n                    property.long || 0\n                ]}\n            >\n                <Popup>\n                    \n                    <PopUpContent imageUrl={fullSourceUrl} title={property.title || \"\"}>\n    \n                    </PopUpContent>\n                </Popup>\n            </Marker>    )\n    }\n    return (<div></div>)\n \n}","import { IMAGE_SMALL_SIZE_APPENDIX, IMAGE_MEDIUM_SIZE_APPENDIX, IMAGE_LARG_SIZE_APPENDIX, IMAGE_BASE_URL } from \"../../../../config\"\n\n\n\n\nexport const genFullSourceUrl = (targetFile: string, size: \"small\" | \"medium\" | \"large\" | undefined) => {\n\n    var targetUrlWithSize = \".\"\n    switch(size){\n        case \"small\":\n            targetUrlWithSize = targetFile.replace(\".\", IMAGE_SMALL_SIZE_APPENDIX);\n            break;\n        case \"medium\":\n            targetUrlWithSize = targetFile.replace(\".\", IMAGE_MEDIUM_SIZE_APPENDIX);\n            break;\n        case \"large\":\n            targetUrlWithSize = targetFile.replace(\".\", IMAGE_LARG_SIZE_APPENDIX);\n            break;\n        default:\n            break;\n    }\n    \n    return IMAGE_BASE_URL + targetUrlWithSize;\n\n}","import React from \"react\";\nimport { Marker} from 'react-leaflet'\nimport { Sight } from \"../../../../generated/graphql\";\n\ninterface Props {\n     sight: Sight\n}\n\nexport const MapMarkerSight: React.FC<Props> = (Props) => {\n\n    const sight = Props.sight;\n\n    if(sight && sight.lat && sight.long && sight.title){\n        return (\n                <Marker\n                    key={sight.id}\n                    position={[\n                        sight.lat,\n                        sight.long\n                    ]}\n                    onClick={() => {\n                            \n                    }}\n                />    )\n    }\n    return (<div></div>)\n}","import React from \"react\";\nimport { Map, TileLayer} from 'react-leaflet'\nimport { Property, Sight } from \"../../../../generated/graphql\";\nimport { MAP_DEFAULT_FOCUS_LAT, MAP_DEFAULT_FOCUS_LONG, MAP_ZOOM_LEVEL } from \"../../../../config\";\nimport { MapMarkerProperty } from \"./MapMarkerProperty\";\nimport { MapMarkerSight } from \"./MapMarkerSight\";\n\ninterface Props {\n     properties: Property[]\n     sights: Sight[]\n     height: string\n}\n\nexport const MapView: React.FC<Props> = (props) => {\n\n     console.log(props.properties)\n     const style = {\n          width: '100%',\n          height: props.height\n     };\n\n   return (\n        <Map style={style} \n        center= {{lat: MAP_DEFAULT_FOCUS_LAT ,lng: MAP_DEFAULT_FOCUS_LONG}}\n        zoom= {MAP_ZOOM_LEVEL}\n        doubleClickZoom= {false} \n        closePopupOnClick= {false} \n        dragging={false} \n        zoomSnap= {0} \n        zoomDelta= {0.5} \n        trackResize= {false}\n        touchZoom= {false}\n        scrollWheelZoom= {false}\n        >\n          <TileLayer\n               url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n               attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />       \n               {props.properties.map((prop) => {\n                         return <MapMarkerProperty key={\"property \"+prop.id} property={prop}/>  \n                    }\n               )}\n               {props.sights.map((sight) => {\n                         return <MapMarkerSight key={\"sight \"+sight.id} sight={sight}/>  \n                    }\n               )}            \n        </Map>\n   )\n}","import React, { useEffect } from \"react\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Snackbar } from \"@material-ui/core\";\n\ninterface Props {\n    message: string\n    severity: \"info\" | \"warning\" | \"error\" | \"success\" | undefined\n    show: boolean\n}\n\nexport const MessageView: React.FC<Props> = ({message, severity= \"info\", show=false}) => {\n \n    const [open, setOpen] = React.useState(false);\n\n    useEffect(() => {\n        setOpen(show)\n    }, [show])\n\n    const handleClose = (event: any) => {    \n        setOpen(open);\n      };\n\n   return (\n    <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity={severity}>\n            {message}\n        </Alert>\n    </Snackbar>\n \n   )\n}","import React from \"react\";\nimport { MessageView } from \"./MessageView\";\n\ninterface Props {\n    error: Error\n    show: boolean\n}\n\nexport const ErrorMessage: React.FC<Props> = (props) => {\n \n   return (\n    <MessageView message={props.error.message} severity={\"error\"} show={props.show}/>\n   )\n}","import React from \"react\";\nimport { useGetAllPropertiesQuery } from \"../../../../generated/graphql\";\nimport { LoadingAnimation } from \"../Messages/LoadingAnimation\";\nimport { MapView } from \"./MapView\";\nimport { ErrorMessage } from \"../Messages/ErrorMessage\";\n\ninterface Props {\n\n}\n\nexport const MapLoader: React.FC<Props> = () => {\n    const {data, loading, error} = useGetAllPropertiesQuery()\n\n    if(loading){ \n\n    }\n\n    if(data && data.getAllProperties){\n        return (\n            <MapView properties={data.getAllProperties} height={\"400px\"} sights={[]}/>\n        )\n    }\n\n    if(error){\n        return (\n            <ErrorMessage error={error} show={true}/>\n        )\n    }\n\n   return (\n        <LoadingAnimation message={'Daten werden geladen ...'}/>\n   )\n}","import React from \"react\";\nimport { Box} from \"@material-ui/core\";\nimport { SectionContainer, SectionHeader } from \"../../../pageframe/global/StyledComponents\";\nimport { MapLoader } from \"../../../pageframe/global/maps/MapLoader\";\n\ninterface Props {\n\n}\n\n\n\nexport const MapSection: React.FC<Props> = () => {\n\n   return (\n    <SectionContainer>\n        <Box>\n            <SectionHeader>\n                Havel, Müritz ... oder Spreewald?\n            </SectionHeader>\n            <MapLoader />\n        </Box>\n    </SectionContainer>\n   )\n}","import React from \"react\";\nimport { SectionContainer, BasicContentBox, SectionHeader } from \"../../pageframe/global/StyledComponents\";\nimport { RegisterFlow } from \"../../pageframe/global/user/register/RegisterFlow\";\n\ninterface Props {\n\n}\n\n\n\nexport const SignInSection: React.FC<Props> = () => {\n\n   return ( \n\n    <SectionContainer>\n        <BasicContentBox>\n          <SectionHeader>\n             Mitglied werden\n          </SectionHeader>\n          <RegisterFlow/>\n        </BasicContentBox>\n\n    </SectionContainer>\n   )\n}","import React from \"react\";\nimport { Card, CardActionArea, CardMedia, CardContent, Typography, CardActions, Button, makeStyles} from \"@material-ui/core\";\nimport { IMAGE_BASE_URL, IMAGE_MEDIUM_SIZE_APPENDIX } from '../../../../config'\nimport { Property } from \"../../../../generated/graphql\";\n\ninterface Props {\n    property: Property\n}\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 240,\n  },\n  media: {\n    height: 140,\n  },\n  cardcontent: {\n    height: 100,\n  }\n  \n});\n\n\n\nexport const PropertyCard: React.FC<Props> = (props) => {\n\n  const classes = useStyles();\n\n  var imageUrl = IMAGE_BASE_URL + props.property.images[0];\n  imageUrl = imageUrl.replace(\".\", IMAGE_MEDIUM_SIZE_APPENDIX)\n  console.log(imageUrl); \n\n   return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media} \n          image=  {imageUrl}\n          title=\"Contemplative Reptile\"\n        />\n        <CardContent className={classes.cardcontent}>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                  {props.property.title}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  {props.property.location}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions >\n        <Button size=\"medium\" color=\"primary\">\n            Reservieren\n        </Button>\n      </CardActions>\n  </Card>\n   )\n}","import React from \"react\";\nimport { useGetAllPropertiesQuery } from \"../../../../generated/graphql\";\nimport { CircularProgress, Grid } from \"@material-ui/core\";\nimport { PropertyCard } from \"./PropertyCard\";\n\ninterface Props {\n\n}\n\n\n\nexport const PropertyTeaser: React.FC<Props> = () => {\n\n    const {data, loading, error} = useGetAllPropertiesQuery();\n\n    if(loading){\n        return (\n            <CircularProgress />\n        )\n    }\n\n    if(data && data.getAllProperties){\n\n       return (\n        <Grid\n        container\n        spacing={2}\n        direction=\"row\"\n        justify=\"center\">\n        {data.getAllProperties?.map(prop => (\n            <Grid item key={prop.id}>\n              <PropertyCard property={prop} /> \n            </Grid>\n        ))}\n    </Grid>\n       ) \n    }\n\n    if(error){\n        return (\n            <div>\n                {JSON.stringify(error)}\n            </div>\n        ) \n     }\n     return (\n        <CircularProgress />\n    )\n}","import React from \"react\";\nimport { SectionContainer, BasicContentBox, SectionHeader } from \"../../../pageframe/global/StyledComponents\";\nimport { PropertyTeaser } from \"./PropertyTeaser\";\n\ninterface Props {\n\n}\n\n\n\nexport const PropTeaserSection: React.FC<Props> = () => {\n\n\n   return (\n\n    <SectionContainer>\n        <BasicContentBox justifyContent=\"center\">\n            <SectionHeader>\n                Über 50 Freizeithäuser im Berliner Umland\n            </SectionHeader>\n            <PropertyTeaser />\n        </BasicContentBox>\n\n    </SectionContainer>\n   )\n}","import React from \"react\";\nimport { Paper, Button, Typography, withStyles } from \"@material-ui/core\";\nimport { Product } from \"../../../../generated/graphql\";\n\ninterface Props {\n    product: Product\n    onOfferClicked: (product: Product) => void\n}\n\nexport const PriceTag = withStyles(\n    {\n      root: {\n        marginTop: '8px',\n        width: '100%',\n        fontSize: '64px',\n        fontWeight: \"lighter\",\n        textAlign: 'center'\n      }\n      \n    }\n  )(Typography)\n\n  export const ActionButton = withStyles(\n    {\n      root: {\n        justifyContent: 'center'\n      }\n      \n    }\n  )(Button)\n\n  export const MonthTag = withStyles(\n    {\n      root: {\n        marginBottom: '16px',\n        width: '100%',\n        fontSize: '24px',\n        textAlign: 'center'\n      }\n      \n    }\n  )(Typography)\n\nexport const OfferView: React.FC<Props> = (props) => {\n\n\n\n  const product = props.product;\n\n  const features = [\n    \"Über 100 Unterkünfte jederzeit nutzen\",\n    \"Familie & Freunde kostenlos mitnehmen\",\n    \"Vor Ort: Fahrräder, BBQ, Liegestühle, etc.\",\n    \"Tour-Guide für Ausflüge und Aktivitäten\",\n    \"24/7 Vor-Ort-Service bei Problemen\"\n]\n\nconst handleOfferClicked = () => {\n    props.onOfferClicked(product)\n}\n\n\n   return (\n    <Paper elevation={3} style={{justifyContent: 'center'}}>\n        <PriceTag color=\"primary\">\n            {product.price}<span style={{fontSize: '14px'}}>€/m</span>\n        </PriceTag>\n\n        <MonthTag>\n            für {product.minmonth} Monate \n        </MonthTag>\n\n        <ul style={{width: '95%', margin: 'auto', fontSize: '14px'}}>\n            {features.map((x) =>{\n                return (\n\n                    <li key={x}> {x}\n                    </li>\n                )\n            }\n            )}\n        </ul>\n        <div style={{padding: '8px', textAlign: 'center', marginTop: '16px'}}>\n            <ActionButton \n              variant=\"contained\" \n              color=\"secondary\" \n              onClick={handleOfferClicked} >jetzt bestellen</ActionButton>\n        </div>   \n    </Paper>\n   )\n}","import React from \"react\";\nimport { Grid} from \"@material-ui/core\";\nimport { SectionContainerDark, BasicContentBox, SectionHeaderWhite } from \"../../../pageframe/global/StyledComponents\";\nimport { OfferView } from \"./OfferView\";\nimport { useProductsQuery } from \"../../../../generated/graphql\";\nimport { LoadingAnimation } from \"../../../pageframe/global/Messages/LoadingAnimation\";\n\n\ninterface Props {\n\n}\n\n\n\nexport const PriceSection: React.FC<Props> = () => {\n\n    const {data, loading, error} = useProductsQuery()\n\n    \n    if(data && data.getAllProducts){\n\n        const products = data.getAllProducts;\n        return (\n            <SectionContainerDark>\n                <BasicContentBox>\n                    <SectionHeaderWhite variant=\"h6\">\n                       Mitgliedschaft\n                   </SectionHeaderWhite>\n                    <Grid container justify=\"center\" spacing={2} direction='row'>\n                        {products.map((product) => {\n                            return (\n                            <Grid item key={product.id}>\n                                <OfferView product={product} onOfferClicked={()=>{}}></OfferView>\n                            </Grid>\n                            )\n                        })}\n                    </Grid>\n                </BasicContentBox>        \n            </SectionContainerDark>\n           )\n    }\n    return (<LoadingAnimation message={\"Angebote werden geladen ...\"} />)\n}","import React from \"react\";\nimport { TopSection } from \"./sections/TopSection\";\nimport { MapSection } from \"./sections/mapsection/MapSection\";\nimport { SignInSection } from \"./sections/SignInSection\";\nimport { PropTeaserSection } from \"./sections/propTeaserSectio/PropTeaserSection\";\nimport { PriceSection } from \"./sections/priceSectio/PriceSection\";\n\ninterface Props {\n\n}\n\nexport const Home: React.FC<Props> = () => {\n\n   return (\n       <div>\n           <TopSection />\n           <MapSection />\n           <PropTeaserSection /> \n           <PriceSection />\n           <SignInSection />\n       </div>\n   )\n}","import { Property } from \"../../generated/graphql\";\nimport { Moment } from \"moment\";\nimport React from \"react\";\n\ntype Booking = {\n    selectedProperty: string | null,\n    arrivalDate: Moment | null,\n    departureDate: Moment | null,\n    isActive: boolean,\n    setSelectedPropterty: (selectedProertyId: string | null) => void,\n    setArrivalDate: (arrivalDate: Moment | null) => void,\n    setDepartureDate: (deoartureDate: Moment | null) => void\n    setIsActive: (isActive: boolean ) => void \n}\n\nconst emptyBooking: Booking = {\n    isActive: false,\n    selectedProperty: null,\n    arrivalDate: null,\n    departureDate: null,\n    setSelectedPropterty: () => {},\n    setArrivalDate: () => {},\n    setDepartureDate: () => {},\n    setIsActive: () => {},\n}\n\nexport const BookingContext = React.createContext<Booking>(emptyBooking);\n\n","import React from 'react'\nimport { HotelOutlined } from '@material-ui/icons'\nimport { Paper } from '@material-ui/core'\n\ninterface Props {\n    value: number\n}\n\nexport const FeaturesBatch:  React.FC<Props> = ({children = <HotelOutlined />, value=0}) => {\n  \n    return (\n        <Paper variant=\"outlined\" style={{display: 'inline-block', margin: '4px', backgroundColor: '#f7f7f7'}}>\n            <div style={{display: 'inline', padding: '4px'}}>\n                {children}\n            </div>\n            <div style={{display: 'inline', padding: '4px'}}>\n                {value}\n            </div> \n        </Paper>\n    )\n}\n","import React, { useContext } from \"react\"\nimport { Grid, Typography, Box } from \"@material-ui/core\"\nimport { BookingContext } from \"../../BookingContext\"\nimport { FeaturesBatch } from \"./FeaturesBatch\"\nimport { IMAGE_BASE_URL } from \"../../../../config\"\nimport { useGetPropertyQuery } from \"../../../../generated/graphql\"\n\ninterface Props {\n\n}\n\nexport const PropertySelectionView:  React.FC<Props> = () => { \n\n    const {selectedProperty} = useContext(BookingContext)\n    const {data, loading, error} = useGetPropertyQuery({\n        variables: {\n            id: selectedProperty || \"\"\n        }\n    })\n\n\n    if(data && data.getProperty){\n        const property = data.getProperty\n        return (\n        <div style={{marginTop: \"8px\"}}>    \n            <Grid container spacing={2} alignItems=\"flex-end\">\n                \n                    <Grid item >\n                        <Box >               \n                            <img alt={\"testbild\"} \n                                src={IMAGE_BASE_URL + property.images[0]} \n                                width={\"120px\"}/>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={6} >\n                        <Typography variant=\"h6\">\n                            {property.title}\n                        </Typography>\n                        <Typography variant=\"subtitle2\">\n                            {property.subtext}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            {property.location}\n                        </Typography>\n                        <FeaturesBatch value={property.beds_adult || 0}>\n                            test\n                            </FeaturesBatch>\n                        </Grid>\n                    </Grid>\n        </div>)\n    } \n\n    return (<div style={{minHeight: \"120px\", alignContent: \"center\"}}>keine Unterkunft ausgewählt</div>)\n}","import React from 'react'\nimport { Button } from '@material-ui/core'\n\ninterface Props {\n    aktiveBooking: boolean\n    disabled: boolean\n    buttonPressedListener: any\n}\n\n\nexport const BookingButton:  React.FC<Props> = (Props) => {\n\n    if(Props.aktiveBooking){\n        return (\n            <Button variant=\"text\" style={{color: \"#FF0000\"}} onClick={Props.buttonPressedListener}>\n                    Reservierung stornieren\n            </Button> )\n    }\n\n    if(Props.disabled){\n        return (\n            <Button variant=\"contained\" disabled >\n                    Reservieren\n            </Button> )\n    }\n\n    return (\n        <Button variant=\"contained\" color=\"primary\" onClick={Props.buttonPressedListener}>\n                Reservieren\n        </Button> )\n}","import React, { useState, useContext } from \"react\"\nimport \"react-dates/initialize\"\nimport \"react-dates/lib/css/_datepicker.css\"\nimport {DateRangePicker} from \"react-dates\" \nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"./customcss.css\"\nimport moment, { Moment } from \"moment\"\nimport { BookingContext } from \"../../BookingContext\"\n\n\n\ninterface Props {\n    blockedDates: Moment[]\n}\n\n\nexport const DateSelector:  React.FC<Props> = (props) => {\n\n    const {arrivalDate, \n      departureDate,\n      setArrivalDate,\n      setDepartureDate} = useContext(BookingContext);\n\n \n    const [focusedInput, setFocusedInput] = useState();\n\n\n    function onDateChange(start: Moment | null, end: Moment | null) {\n            setArrivalDate(start);\n            setDepartureDate(end);\n      }\n    \n      function onFocusChange(focusedInput: any) {\n        setFocusedInput(focusedInput);\n      }\n\n      const isOutsideRange = (day: Moment) => {        \n        return day.isBefore(moment()) \n      }\n\n      const isDayBlocked = (day: Moment) => {\n        console.log(props.blockedDates.length + ' date ');\n        var date = props.blockedDates.find((data) => {\n            var istrue = day.isSame(data, 'd');\n            return istrue;\n        })\n        if(date){\n          return true\n        }\n        return false;\n      } \n      \n\n    return (\n            <div>   \n                <DateRangePicker \n                    startDatePlaceholderText={\"Anreise\"}\n                    endDatePlaceholderText={\"Abfahrt\"}\n                    startDate={arrivalDate}\n                    startDateId=\"your_unique_start_date_id\"\n                    endDate={departureDate}\n                    endDateId=\"your_unique_end_date_id\"\n                    onDatesChange={({ startDate, endDate }) => { onDateChange( startDate, endDate )}}\n                    isDayBlocked={isDayBlocked}\n                    focusedInput={focusedInput}\n                    displayFormat={() => \"DD. MMMM YYYY\"}\n                    onFocusChange={onFocusChange}\n                    isOutsideRange={isOutsideRange}/>               \n        </div>\n    )\n}","import React from 'react'\nimport moment, { Moment } from 'moment'\nimport { useBlockedDatesByPropertyQuery} from '../../../../generated/graphql'\nimport { DateSelector } from './DateSelector'\nimport { LoadingAnimation } from '../../../pageframe/global/Messages/LoadingAnimation'\nimport { ErrorMessage } from '../../../pageframe/global/Messages/ErrorMessage'\n\ninterface Props {\n    propertyId: string | undefined\n}\n\nexport const TravelDatesPicker:  React.FC<Props> = (props) => {\n\n   var propId = props.propertyId;\n   if(!propId){\n    propId = \"\";\n   }\n\n    const {data, loading, error} = useBlockedDatesByPropertyQuery({\n        variables: {\n            propertyId: propId\n        }\n    })\n\n    if(loading){\n        return(<LoadingAnimation message={\"Buchungen werden geladen\"}/>)\n    }\n\n    if(error){\n        return(<ErrorMessage error={error} show={true}/>)\n    }\n\n    var blockedDates: Moment[] = [];\n\n    if(data && data.getBlockedDatesFromProperty){        \n        data.getBlockedDatesFromProperty.map((date) =>{\n            blockedDates.push(moment(date.dateTimeStamp))\n            return true;\n        })\n    }\n\n    return  (\n        <DateSelector blockedDates={blockedDates} />\n    )\n\n}","import React from 'react'\nimport { Dialog, Button } from '@material-ui/core'\n\n\ninterface Props {\n    handleClose: () => void\n    open: boolean\n    buttonText: string\n}\n\nexport const SuccessDialog: React.FC<Props> = (props) => {\n\n    return (\n       <Dialog\n        open={props.open}\n        keepMounted\n        onClose={props.handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <div style={{padding: \"16px\"}}>\n          {props.children}\n    <Button onClick={props.handleClose} variant={\"text\"} color=\"primary\" style={{width: \"100%\", textAlign: \"center\"}}>{props.buttonText}</Button>\n        </div>\n      </Dialog>\n    )\n}\n","import React from 'react'\nimport { DialogTitle, DialogContentText } from '@material-ui/core'\n\ninterface Props {\n    title: string\n    text: string\n}\n\nexport const SuccessDialogContent: React.FC<Props> = (props) => {\n\n    return (\n      <div>\n        <div style={{display: \"block\", marginLeft: \"auto\", marginRight: \"auto\", padding: \"8px\"}}>\n           {props.children}\n        </div>\n        <DialogTitle style={{textAlign: \"center\", width: \"100%\", padding: \"8px\"}} >{props.title}</DialogTitle>\n        <DialogContentText style={{margin: \"auto\", width: \"fit-content\", padding: \"8px\"}} >{props.text}</DialogContentText>\n\n      </div>\n    )\n}\n\n//\n","import { BeachAccess } from \"@material-ui/icons\";\nimport React from \"react\";\n\n\n\nexport const sunUmbrella =  <BeachAccess style={{display: \"block\", marginLeft: \"auto\", marginRight: \"auto\"}}/>","import React, { useState, useEffect } from 'react'\nimport { Dialog, IconButton } from '@material-ui/core'\nimport { MapView } from '../../../pageframe/global/maps/MapView'\nimport { Close } from '@material-ui/icons'\n\ninterface Props {\n        show: boolean\n        onClose: () => void\n}\n\n\nexport const LargeMapView:  React.FC<Props> = (Props) => {\n\n        const [open, setopen] = useState(Props.show)\n\n        console.log(\"LargeMap \" + Props.show);\n\n        const handleClose = () =>{\n              setopen(false)  \n        }\n\n\n      useEffect(() => {\n            setopen(Props.show);\n      }, [Props.show]);\n\n        return (\n                <Dialog onClose={handleClose} \n                        fullWidth={true}\n                        maxWidth={\"lg\"}\n                        aria-labelledby=\"customized-dialog-title\" \n                        open={open}>\n                      <div style={{height: \"90vh\"}}>\n                              <IconButton onClick={handleClose}>\n                                    <Close ></Close>\n                              </IconButton>\n                              <MapView properties={[]} height={\"90vh\"} sights={[]}></MapView>\n                      </div>  \n                </Dialog> )\n}","import React, { useState } from 'react'\nimport { IconButton } from '@material-ui/core'\nimport { Map } from '@material-ui/icons'\nimport { LargeMapView } from '../mapview/LargeMapView'\n\ninterface Props {\n    \n}\n\n\nexport const ShowMapButton:  React.FC<Props> = (Props) => {\n\n    const [openMap, setopenMap] = useState(false);\n   \n    const onClick = () => {\n        setopenMap(true)\n    }\n\n\n    return (\n        <div>\n            <IconButton onClick={onClick}>\n                    <Map></Map>\n            </IconButton> \n            <LargeMapView show={openMap} onClose={() => {setopenMap(false)}}></LargeMapView>\n        </div>\n)\n\n}","import React, { useContext, useEffect, useState} from 'react'\nimport { useMyBookingQuery, useDeleteBookingMutation, useCreateMyBookingMutation, MyBookingQuery} from '../../../generated/graphql';\nimport { PropertySelectionView } from './propertyView/PropertySelectionView';\nimport { BookingButton } from './actions/BookingButton';\nimport { Grid, Typography } from '@material-ui/core';\nimport moment from 'moment';\nimport { BookingContext } from '../BookingContext';\nimport { MyBookingArea, BasicContentBox } from '../../pageframe/global/StyledComponents';\nimport { TravelDatesPicker } from './datasview/TravelDatesPicker';\nimport { SuccessDialog } from '../../pageframe/global/dialogs/SuccessDialog';\nimport { SuccessDialogContent } from '../../pageframe/global/dialogs/SuccessDialogContent';\nimport { sunUmbrella } from '../../pageframe/global/dialogs/DialogIcons';\nimport { ShowMapButton } from './actions/ShowMapButton';\n\n\ninterface Props {\n    \n}\n\nexport const MyBooking:  React.FC<Props> = () => {\n\n    const {data, loading, error, refetch} = useMyBookingQuery();\n\n    const [show, setShow] = useState(false);\n\n    const [Booking] = useCreateMyBookingMutation();\n    const [deleteBooking] = useDeleteBookingMutation();\n    const { \n              setArrivalDate, \n              setDepartureDate,\n              selectedProperty,\n              arrivalDate, \n              departureDate,\n              isActive,\n              setIsActive,\n              setSelectedPropterty} = useContext(BookingContext);\n\n    \n    if(loading){\n      console.log(\"laoding\" + loading)\n    }\n\n    if(error){\n      console.log(\"error\" + error) \n    }\n\n    function clearBookingView() {\n      setIsActive(false);\n      setArrivalDate(null);\n      setDepartureDate(null);\n      setSelectedPropterty(null)\n    }\n\n   const setBooking = (data: MyBookingQuery | undefined) => {\n    const myBooking = data?.myBooking;\n    if(myBooking && myBooking.dateOfArrival && myBooking.dateOfDeparture && myBooking.propertyId){\n      setArrivalDate(moment(myBooking.dateOfArrival));\n      setDepartureDate(moment(myBooking.dateOfDeparture))\n      setSelectedPropterty(myBooking.propertyId)\n      setIsActive(true);\n    } else {\n      clearBookingView()\n    }\n  }\n\n\n\n  const booking = data?.myBooking;\n\n    useEffect(() => {\n      if(data){\n        setBooking(data)\n      }\n        \n    } , [booking]) \n    \n\n    const bookingButtonPressed = async () => {\n      console.log(isActive)\n      if(isActive){\n          deleteBook();     \n      } else{\n          createBook()\n      }\n    }\n\n    const deleteBook = async () => {\n      if(data && data.myBooking){\n        const result = await deleteBooking({\n          variables: {\n            bookingId: data.myBooking.id\n          }\n        })\n        if(result){\n          console.log(\"result myBooking\" + result);\n          refetch();\n          clearBookingView()\n        }\n      } \n    }\n\n    const createBook = async () => {\n      if(selectedProperty && arrivalDate && departureDate){\n        const result = await Booking(\n          { \n            variables: {\n                arrival: arrivalDate.toISOString(),\n                departure: departureDate.toISOString(),\n                propertyId: selectedProperty\n            }\n          })\n          if(result){\n\n            console.log(result);\n            refetch();\n            setShow(true)\n            setIsActive(true)\n          }  \n      }\n    }\n\n    const closeDialog = () => {\n        setShow(false)\n    }\n\n    \n    return (\n        <div style={{position: \"sticky\", top: 0, zIndex: 2}}>\n              <MyBookingArea elevation={4}>        \n                <BasicContentBox>\n                  <div style={{marginBottom: \"8px\"}}>\n                  <Typography variant=\"h4\">\n                    Dein nächster Ausflug:\n                    </Typography>\n                    </div>\n                    <TravelDatesPicker propertyId={selectedProperty || \"\" } />\n                  \n                  <Grid container spacing={4} alignItems=\"flex-end\">\n                    <Grid item xs={12} sm>\n                      <PropertySelectionView />\n                    </Grid>\n                    <Grid item >\n\n\n                      <SuccessDialog \n                          open={show} \n                          handleClose={closeDialog}\n                          buttonText={\"Los\"} \n                          >\n                            <SuccessDialogContent\n                            title={\"Super\"}\n                            text={\"Dann kann es bald los gehen...\"}>\n                              {sunUmbrella}\n\n                            </SuccessDialogContent>\n                          </SuccessDialog>\n                      <ShowMapButton />\n                      <BookingButton \n                          aktiveBooking={isActive} \n                          disabled={selectedProperty && arrivalDate && departureDate? false : true} \n                          buttonPressedListener={bookingButtonPressed}/>\n                    </Grid>\n                  </Grid>\n                  </BasicContentBox>               \n              </MyBookingArea>             \n          </div>\n    )\n    \n}\n","import React from 'react'\nimport { Typography, Grid } from '@material-ui/core';\nimport {Rating} from '@material-ui/lab'\nimport {HotelOutlined} from '@material-ui/icons'\nimport { FeaturesBatch } from '../myBooking/propertyView/FeaturesBatch';\n\n\ninterface Props {\n    property: any\n}\n\n\nexport const PropertyViewInfos:  React.FC<Props> = (Props) => {\n    \n    return (\n        <div>                 \n            <Grid container \n                    direction=\"column\" \n                    justify=\"flex-start\" >\n                    <Grid item>\n                        <Typography variant={\"h6\"} color={\"secondary\"}>\n                            {Props.property.title}\n                        </Typography>                      \n                    </Grid>\n                    <Grid item>\n                        <Typography variant={\"subtitle2\"}>\n                            {Props.property.subtext}\n                        </Typography>                      \n                    </Grid>\n                    <Grid item>\n                        <Typography variant={\"body1\"}>\n                            {Props.property.location}\n                        </Typography>                      \n                    </Grid>\n                    <Grid item>\n                        <Typography variant={\"body2\"}>\n                            {Props.property.beds_adults}\n                        </Typography>                      \n                    </Grid>\n                    <Grid item>\n                        <Rating name=\"read-only\" defaultValue={2.5} precision={0.5} readOnly/>         \n                    </Grid> \n                    <Grid item>\n                        <FeaturesBatch value={Props.property.beds_adult}>\n                                <HotelOutlined />\n                        </FeaturesBatch>                   \n                    </Grid>                     \n                </Grid>                                       \n        </div>\n    )\n    \n}\n","import React, { useContext } from 'react'\nimport { Button, Box, Grid, Paper} from '@material-ui/core';\nimport { BookingContext } from '../BookingContext';\nimport { IMAGE_BASE_URL } from '../../../config';\nimport { PropertyViewInfos } from './PropertyViewInfos';\n\n\ninterface Props {\n    property: any\n}\n\n\nexport const PropertyView:  React.FC<Props> = (Props) => {\n\n    const {setSelectedPropterty, isActive} = useContext(BookingContext);\n    \n    return (\n        <div>                 \n            <Box marginY={2}> \n            <Paper>               \n                <Grid container direction=\"row\" spacing={0} justify=\"flex-start\" alignItems=\"flex-end\">\n                    <Grid item >\n                        <img alt={\"Bild des Gartens\"} src={IMAGE_BASE_URL+ Props.property.images[0]} width={\"240px\"} style={{marginRight: \"8px\"}}/>\n                    </Grid>\n                    <Grid item xs={12} sm >\n                        <PropertyViewInfos property={Props.property} />\n                    </Grid>\n                    <Grid item >             \n                        <Button variant=\"outlined\" \n                            color=\"primary\" \n                            disabled={isActive} \n                            style={{margin: \"8px\"}} \n                            onClick={() => {setSelectedPropterty(Props.property)}}>\n                            auswählen\n                        </Button>\n                    </Grid>                                   \n                </Grid> \n            </Paper>               \n            </Box>\n             \n        </div>\n    )\n    \n}\n","import React from 'react'\nimport { useGetAllPropertiesQuery } from '../../../generated/graphql'\nimport { PropertyView } from './PropertyView';\nimport { BasicContentBox } from '../../pageframe/global/StyledComponents';\n\n\ninterface Props {\n\n}\n\n\nexport const PropertyList:  React.FC<Props> = () => {\n    const {data, loading, error} = useGetAllPropertiesQuery();\n\n\n    if(loading){\n        return <div>\n            loading ....\n        </div>\n    }\n\n    if(error){\n        console.log(error)\n        return <div>err</div>\n    }\n\n    if(!data){\n        return <div>\n            no data\n        </div>\n    }\n    \n    return (  \n        <BasicContentBox>\n            {data.getAllProperties?.map((x) => (                                                   \n                        <PropertyView key={x.id} property={x}></PropertyView>\n            ))}\n        </BasicContentBox>\n    )\n}\n","import React, { useState } from 'react'\nimport { MyBooking } from './myBooking/MyBooking';\nimport { PropertyList } from './propertyList/PropertyList';\nimport { BookingContext } from './BookingContext';\nimport { Property } from '../../generated/graphql';\nimport { Moment } from 'moment';\nimport { BgContainer } from '../pageframe/global/StyledComponents';\n\ninterface Props {\n    \n}\n\n\nexport const BookingRouter:  React.FC<Props> = () => {\n    \n    const [selectedProperty, setSelectedProp] = useState();\n    const [arrivalDate, setArrivalD] = useState();\n    const [departureDate, setDepartureD] = useState();\n    const [isActive, setIsActi] = useState(false)\n\n    const setSelectedPropterty = (property: string | null): void => {\n        setSelectedProp(property)\n        console.log(property)\n    }\n\n    const setArrivalDate = (arrival: Moment | null): void => {\n        setArrivalD(arrival);\n    }\n\n    const setDepartureDate = (departure: Moment | null): void => {\n        setDepartureD(departure);\n    }\n\n    const setIsActive = (active: boolean): void => {\n        setIsActi(active);\n    }\n\n\n    const values = {\n        selectedProperty,\n        arrivalDate,\n        departureDate,\n        setSelectedPropterty,\n        setArrivalDate,\n        setDepartureDate,\n        isActive,\n        setIsActive\n    }\n\n\n    return (        \n        <BookingContext.Provider value={values}>\n            <BgContainer>\n                <MyBooking />              \n                <PropertyList /> \n            </BgContainer>                  \n        </BookingContext.Provider>  \n    )\n    \n}\n","import React from 'react'\nimport { Avatar, Menu, MenuItem } from '@material-ui/core';\nimport Person from '@material-ui/icons/Person'\nimport {useHistory} from 'react-router-dom'\nimport { useLogoutMutation } from '../../../generated/graphql'\nimport { setAccessToken } from '../../../accessToken'\n\ninterface Props {\n    loggedOut: any\n}\n\n\nexport const UserMenu: React.FC<Props> = (props) => {\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [logout, {client}] = useLogoutMutation();\n    \n\n    let history = useHistory();\n\n    const handleLogoutClicked = async () => {\n        history.push(\"/\") \n        setAccessToken(\"\");\n        client!.clearStore()        \n            .then(() => logout()).then(props.loggedOut())\n        handleClose(); \n    };\n\n    const open = Boolean(anchorEl);\n\n    const handleClose = () => {\n      setAnchorEl(null);\n    };\n  \n    const handleMenu = (event :any) => {\n    setAnchorEl(event.currentTarget);\n    };\n\n    return (\n        <div>\n            <Avatar aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleMenu}\n              style={{backgroundColor: \"#ffffff\"}}>\n                  <Person color=\"primary\"></Person>\n                </Avatar>\n                <Menu\n                  id=\"menu-appbar\"\n                  anchorEl={anchorEl}\n                  anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                  }}\n                  keepMounted\n                  transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                  }}\n                  open={open}\n                  onClose={handleClose}\n                >\n                  <MenuItem onClick={handleLogoutClicked}>Logout</MenuItem>\n                  <MenuItem onClick={handleClose}>My account</MenuItem>\n                </Menu>    \n            </div>\n    )\n}\n","import React, { useEffect } from 'react'\n\nimport {AppBar, Toolbar, IconButton, Button, makeStyles, Typography } from \"@material-ui/core\"\nimport {UserMenu} from './UserMenu';\nimport { useMeQuery } from '../../../generated/graphql';\n\n\n\ninterface Props {\n    \n}\n\n\nexport const Header: React.FC<Props> = () => {\n    \n    const {data} = useMeQuery();\n    const [auth, setAuth] = React.useState(false);\n\n    const useStyles = makeStyles(theme => ({\n      root: {\n        flexGrow: 1,\n      },\n      menuButton: {\n        marginRight: theme.spacing(2),\n      },\n      title: {\n        color: 'white',\n        flexGrow: 1,\n      },\n      button: {\n        color: 'white'\n      }\n    }));\n\n    const classes = useStyles();\n\n    var userId = data?.me?.id;\n    useEffect(() => {\n      if(userId){\n        setAuth(true)\n      }\n    }, [userId])\n\n    const handleLoggedOut = () => {\n        setAuth(false)\n    }\n\n    const loginMenu = () => {\n      if(auth){       \n        return (<UserMenu loggedOut={handleLoggedOut}/>)\n      } else {\n        return ( <div>\n          <Button className={classes.button} href=\"/login\" color=\"inherit\">Login</Button>\n          <Button variant=\"outlined\" className={classes.button} href=\"/register\" color=\"inherit\">Register</Button> \n        </div>);\n\n      }\n    }\n   \n    return (\n      <header>\n        <AppBar position=\"static\">   \n          <Toolbar>        \n            <IconButton edge=\"start\" className={classes.menuButton} color=\"default\" aria-label=\"menu\">\n                  <img src=\"cg_header_logo.png\" alt=\"Logo\"/>\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              \n            </Typography>      \n            {loginMenu()}\n        </Toolbar>\n        </AppBar>\n      </header>\n        )\n}\n","import { withStyles, Typography, Link } from \"@material-ui/core\";\nimport { SectionContainer } from \"../global/StyledComponents\";\nimport { FOOTER_HEIGHT } from \"../../../config\";\n\nexport const FooterSectionHeader = withStyles({\n    root: {\n        color: 'white',\n        fontSize: '16px',    \n    },\n  })(Typography);\n\n  export const SectionItem = withStyles({\n    root: {\n        marginLeft: '8px',\n        marginTop: '4px',\n        color: 'white',\n        fontSize: '12px'\n    },\n  })(Link);\n\n  export const SectionHeader = withStyles({\n    root: {\n        color: 'gray',\n        width: '100%',\n        fontSize: '32px',\n        paddingBottom: \"24px\",\n        textAlign: 'center'\n    },\n  })(Typography);\n\n\n  export const FooterHeader = withStyles({\n    root: {\n        color: 'gray',\n        width: '100%',\n        fontSize: '32px',\n        paddingBottom: \"24px\",\n        textAlign: 'center'\n    },\n  })(Typography);\n\n\nexport const FooterSectionContainer = withStyles({\n  root: {\n      backgroundColor: \"#444444\",\n      bottom: \"0\",\n      height: FOOTER_HEIGHT\n  },\n})(SectionContainer); ","\nimport React from 'react'\nimport { SectionItem, FooterSectionHeader } from './Style'\n\n\ninterface Props{\n    headerTitle: string\n    items: {\n        id: number\n        itemTitle: string,\n        link: string\n    }[]\n}\n\n\nexport const FooterMenu: React.FC<Props> = (props) => {\n\n    return (\n        <div>\n            <FooterSectionHeader>\n                Über uns\n            </FooterSectionHeader>\n            {props.items.map(x => {\n                return (<SectionItem key={x.id} href={x.link}>               \n                    {x.itemTitle} <br />\n                </SectionItem>)\n                })\n            } \n        </div>\n    )\n}\n","import React from 'react'\nimport { BasicContentBox } from '../global/StyledComponents'\nimport { Grid } from '@material-ui/core'\nimport { FooterMenu } from './FooterMenu'\nimport { FOOTER_HEIGHT } from '../../../config'\nimport { FooterSectionContainer } from './Style'\n\ninterface Props {\n    \n}\n\nexport const Footer: React.FC<Props> = () => {\n\n\n    const menu1 = [\n        {\n            id: 1,\n            itemTitle: \"Wochenende buchen\",\n            link: \"/booking\"\n        },\n        {\n            id: 2,\n            itemTitle: \"Club Grün\",\n            link: \"/\"\n        },\n        {\n            id: 3,\n            itemTitle: \"Service Portal\",\n            link: \"/admin\"\n        } ,\n        {\n            id: 4,\n            itemTitle: \"Onboarding\",\n            link: \"/onboarding\"\n        }   \n    ]\n\n\n    return (\n        <div style={{bottom: \"0\", position: \"absolute\", width: \"100%\", height: FOOTER_HEIGHT}}>\n        <FooterSectionContainer>\n            <BasicContentBox>\n                <Grid container>\n                    <Grid item xs={4}>\n                        <FooterMenu items={menu1} headerTitle={\"Über uns\"} ></FooterMenu>\n                    </Grid>\n                    <Grid item xs={4}>\n\n                    </Grid>\n                    <Grid item xs={4}>\n                    </Grid>\n                </Grid>\n            </BasicContentBox>\n        </FooterSectionContainer>\n       </div> \n    )\n\n}","import React from 'react'\nimport { Button, TableRow, TableCell } from '@material-ui/core';\n\n\ninterface Props {  \n    id: string\n    title: string\n    tagone: string\n    tagtwo: string\n    tagthree: string\n    onEditClicked: any\n    onDeletClicked: any\n}\n\n\n\nexport const ListItem: React.FC<Props> = ({id=0, title='noTitle', tagone='', tagtwo='', tagthree='', onDeletClicked, onEditClicked}) => {\n    \n    const onClickEdit = () => {\n        onEditClicked(id)\n    }\n\n    const onClickDelete = () => {\n        onDeletClicked(id)\n    }\n    \n    return (\n        <>\n            <TableRow>\n                <TableCell>\n                    {id}\n                </TableCell>\n                <TableCell>\n                    {title}\n                </TableCell>\n                <TableCell>\n                    {tagone}\n                </TableCell>\n                <TableCell>\n                    {tagtwo}\n                </TableCell>\n                <TableCell>\n                    {tagthree}\n                </TableCell>\n                <TableCell>\n                    <Button onClick={onClickEdit}>edit</Button>\n                </TableCell>\n                <TableCell>\n                    <Button onClick={onClickDelete}>delete</Button>\n                </TableCell>\n            </TableRow>\n        </>\n    )\n}","import React from 'react'\nimport { useGetAllPropertiesQuery} from '../../../generated/graphql'\nimport { TableBody, Table, Container, Button } from '@material-ui/core';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { ListItem } from '../lists/ListItem';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\ninterface Props {\n}\n\nexport const PropertyList: React.FC<Props> = (props) => {\n\n    const {data, loading, error} = useGetAllPropertiesQuery();\n    const {path} = useRouteMatch();\n\n    const history = useHistory();\n\n\n    if(loading){\n        return (\n            <LoadingAnimation message={'Daten werden geladen'}/>\n        )\n    }\n\n    if(error){\n        return (\n            <ErrorMessage error={error} show={true}/>\n        )\n    }\n\n    const onPropertyEdit = (id: any) => {\n        history.push( path + '/' + id);\n        console.log(id)\n    }\n\n    const onPropertyDelete = (id: any) => {\n\n    }\n\n    const onNewPropertyClicked = () => {\n        onPropertyEdit(0);\n    } \n\n    if(data && data.getAllProperties){\n        return(\n            <Container>\n                <Table>      \n                    <TableBody>\n                        {data?.getAllProperties.map(x => {\n                        return (              \n                            <ListItem\n                                key={x.id} \n                                onEditClicked={onPropertyEdit} \n                                onDeletClicked={onPropertyDelete} \n                                id={x.id}\n                                title={x.title || \"\"}\n                                tagone={x.location || \"\" }\n                                tagtwo={x.subtext || \"\"}\n                                tagthree={\"\"} />\n                            )                \n                        })}\n                    </TableBody>\n                </Table> \n                <Button onClick={onNewPropertyClicked}>New Property</Button>\n            </Container> \n        )\n\n    }\n\n    return (\n        <LoadingAnimation message={'Daten werden geladen'}/>  \n    )\n}","import React from 'react'\nimport { Button, TextField, Grid } from '@material-ui/core'\nimport { Formik , Form} from 'formik'\n\ninterface Props {\n    values: any;\n    onSubmit: (values: any) => void;\n}\n\nexport const EditorForm: React.FC<Props> = (props) => {\n\n\n    return (\n        <Formik initialValues={props.values} onSubmit={props.onSubmit} enableReinitialize={true}>\n            {({values, handleChange, handleBlur}) => (\n                <Form>\n                <Grid container direction=\"column\" spacing={4}>\n                        {Object.entries(values).map(([key, value]) => {\n                    \n                            if(key !== \"id\" && key !== \"__typename\" && key !== \"images\"){\n                                return <Grid item key={key}>\n                                            <TextField \n                                            name={key}\n                                            label={key}\n                                            value={value ? value : \"\"} \n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            />\n                                        </Grid>\n\n                            }\n                            }\n                        )} \n                        <Grid item>\n                            <Button variant=\"contained\" type=\"submit\">\n                                speichern\n                            </Button>\n                        </Grid>\n                    </Grid> \n                </Form>  \n            ) }           \n        </Formik>\n    )\n    \n\n}\n\n /*       \n<pre>\n{JSON.stringify(values, null, 2)}\n</pre>\n*/","import React from \"react\";\nimport { MessageView } from \"./MessageView\";\n\ninterface Props {\n    response: string\n    show: boolean\n}\n\nexport const SuccessMessage: React.FC<Props> = (props) => {\n \n   return (\n        <MessageView message={props.response} severity={\"success\"} show={props.show}/>\n   )\n}","import React, { useState } from 'react'\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport axios from 'axios'\nimport { SuccessMessage } from '../../pageframe/global/Messages/SucessMessage';\n\n\ninterface Props {\n    propertyId: string\n    url: string\n}\n\nexport const PictureUpload: React.FC<Props> = (props) => {\n\n    console.log(props.propertyId);\n\n    const [isUploaded, setIsUploaded] = useState(false)\n    const [file, setfile] = useState()\n\n    const onSubmitHandler = (file: any) => {\n        const data = new FormData()\n        data.append('targetId', props.propertyId+\"\")\n        data.append('imageFile', file)   \n        axios.post(props.url, data, { \n            headers: {\n                'Content-Type': 'multipart/form-data'\n              }\n        }).then((response) => {\n          if(response){\n            setIsUploaded(true);\n          }\n           \n        })\n    }\n\n    return(\n        <Formik \n          initialValues={{file: null}}\n          onSubmit={(values) => {  \n            if(values && values.file){\n                onSubmitHandler(values.file)\n                console.log(values.file)\n                \n            } \n          }} \n          validationSchema={Yup.object().shape({\n            file: Yup.mixed().required(),\n          })}\n          render={({ values, handleSubmit, setFieldValue }) => {\n            return (\n              \n              <form onSubmit={handleSubmit}>\n                <div>\n                  <img src={file} alt=\"Thumbnial\" style={{width: \"60px\", margin: \"8px\"}}/>\n                </div>\n                <div className=\"form-group\">\n                  <input id=\"file\" name=\"file\" type=\"file\" onChange={(event) => {\n                      if(event?.currentTarget && event.currentTarget.files){\n                        setfile(URL.createObjectURL(event.currentTarget.files[0]))\n                        setFieldValue(\"file\", event.currentTarget.files[0]);\n                      }\n                  }} className=\"form-control\" />\n                  \n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">Bild hochladen</button>\n                <SuccessMessage show={isUploaded} response={\"response\"}></SuccessMessage>\n              </form>\n\n            );\n          }} />\n    )\n}","import { IMAGE_BASE_URL } from \"../../../../config\"\nimport React from \"react\";\nimport { IconButton, Grid } from \"@material-ui/core\";\nimport { DeleteForeverOutlined } from \"@material-ui/icons\";\n\n\n\ninterface Props {\n    imageUrlAppendix: string\n    size: \"s\" | \"m\" | \"l\" | \"default\"\n    handleDelete: (urlAppendix: string) => void\n}\n\nexport const ImageView: React.FC<Props> = (props) => {\n\n    var imageUrl = IMAGE_BASE_URL + props.imageUrlAppendix;\n    var sizeAppendix = \".\"\n\n    switch(props.size){\n        case \"s\": sizeAppendix = \"-sm.\";\n            break;\n        case \"m\": sizeAppendix = \"-md.\";\n            break;\n        case \"l\": sizeAppendix = \"-lg.\";\n            break;\n        default: sizeAppendix = \".\";        \n    }\n\n    imageUrl = imageUrl.replace(\".\", sizeAppendix);\n\n    const handleDelete = () => {\n        props.handleDelete(props.imageUrlAppendix);\n    }\n\n\n    return (\n        <Grid item > \n                <div style={{margin: \"8px\"}}>\n                <img src={imageUrl} alt={imageUrl}></img>\n                <IconButton onClick={handleDelete}>\n                    <DeleteForeverOutlined></DeleteForeverOutlined>\n                </IconButton>\n            </div>      \n        </Grid>\n        )\n}","\nimport { ImageView } from \"./ImageView\"\nimport React from \"react\"\nimport { Grid } from \"@material-ui/core\"\n\n\ninterface Props {\n    imageUrlApends: string[]\n    onDeleteHandler: (imageAppendix: string) => void\n}\n\nexport const ImageList: React.FC<Props> = (props) => {\n\n    return (\n        <Grid container spacing={2}>\n            {props.imageUrlApends.map(\n                (imageUrlAppendix, index) => {\n                    return <ImageView key={index} imageUrlAppendix={imageUrlAppendix} size={\"s\"} handleDelete={props.onDeleteHandler}></ImageView>\n                } \n            )}\n        </Grid>\n       \n\n    )\n}","import React from 'react'\nimport { EditorForm } from './EditorForm'\nimport { Container } from '@material-ui/core'\nimport { PictureUpload } from '../imagehandler/PictureUpload'\nimport { ImageList } from '../imagehandler/ImageList/ImageList'\n\n\ninterface Props {\n    entity: any\n    entityId: string\n    imageuploadurl: string\n    store: (entity: any) => void\n}\n\nexport const Editor: React.FC<Props> = ({entity, entityId, imageuploadurl, store, children}) => {\n\n    function onImageDelete (imageUrl: string) {\n        console.log(\"try to delete\")\n        const newEntity = entity;\n        const index: number = entity.images.indexOf(imageUrl);\n        if(index >= 0){\n            newEntity.images.splice(index, 1);\n            console.log(\"delete \" + index + \" \" + newEntity)\n            store(newEntity); \n        }\n    }\n\n    const imagelist = () =>{\n        if(entity.images){\n            return <ImageList imageUrlApends={entity.images} onDeleteHandler={onImageDelete}/>\n        }\n    } \n    \n\n    return(\n        <Container>\n            <div style={{marginTop: \"16px\", marginBottom: \"16px\"}}>\n                {imagelist()}\n                <PictureUpload url={imageuploadurl} propertyId={entityId}/>     \n                {children}\n            </div>\n            <EditorForm values={entity} onSubmit={store}/>\n        </Container>\n    )\n\n\n\n}","import { Property } from \"../../../generated/graphql\";\n\nexport const newProperty: Property = { \n    id: \"\",\n    creationDate: \"\",\n    title: \"\",\n    subtext: \"\",\n    location: \"\",\n    lat: 0.0,\n    long: 0.0,\n    beds_adult: 0,\n    beds_kids: 0,\n    beds_tent: 0,\n    images: [],   \n}\n\nexport const formatProperty = (property: Property) => {\n\n    property.__typename = undefined;\n    property.lat = parseFloat(property.lat+\"\");\n    property.long = parseFloat(property.long+\"\");\n    property.beds_adult = parseFloat(property.beds_adult+\"\");\n    property.beds_kids = parseFloat(property.beds_kids+\"\");\n    property.beds_tent = parseFloat(property.beds_tent+\"\");\n\n    return property;\n}","import React, { useState } from 'react'\nimport { Property, useGetPropertyQuery, useCreatePropertyMutation } from '../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatProperty, newProperty } from './PropertyObject';\nimport { PROPERTY_IMAGE_UPLOAD_URL } from '../../../config';\n\n\ninterface Props {\n    \n}\n\nexport const PropertyEditor: React.FC<Props> = (props) => {\n\n    const { propertyId } = useParams()\n\n    const [showMessage, setshowMessage] = useState(false);\n    const {data, error} = useGetPropertyQuery({\n        variables: {\n            id: propertyId ? propertyId : \"0\"\n        }\n    });\n    \n    const [saveProperty] = useCreatePropertyMutation();\n\n    async function onSubmit(values: Property) {     \n        var result = await saveProperty({\n            variables: {\n                property: formatProperty(values)\n            }\n        });\n        if(result){\n            setshowMessage(true)\n            // history.push(\"/admin#/properties\")\n        }\n    }\n\n    \n    if((data && data.getProperty) || (propertyId == \"0\")) {\n        var property = newProperty;\n        if(data?.getProperty){\n            property = data.getProperty;\n        }\n        \n        return(\n            <Editor \n                entity={property} \n                store={onSubmit} \n                entityId={property.id}\n                imageuploadurl={PROPERTY_IMAGE_UPLOAD_URL}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}","import React from 'react'\nimport { Button, TableRow, TableCell } from '@material-ui/core';\nimport { Field } from './TableList';\n\n\ninterface newProps {  \n    fields: Field[]\n    rowData: any\n    onEditClicked: (entity: any) => void \n    onDeleteClicked: (entity: any) => void \n}\n\n\n\nexport const ListItemTest: React.FC<newProps> = ({rowData, fields, onDeleteClicked, onEditClicked}) => {\n    \n    const editClicked = () => {\n        onEditClicked(rowData)\n    }\n\n    const deleteClicked = () => {\n        onDeleteClicked(rowData)\n    }\n\n\n\n    return (\n        <>      \n            <TableRow key={rowData.id}>\n                { fields.map((field) => {\n                     return (  <TableCell key={field.keyName}>{rowData[field.keyName]+ \" \"} </TableCell>)\n                })}\n                <TableCell key={\"edit-button\"}>\n                    <Button onClick={editClicked}>edit</Button>\n                </TableCell>\n                <TableCell key={\"delete-button\"}>\n                    <Button onClick={deleteClicked}>delete</Button>\n                </TableCell>\n            </TableRow>\n        </>\n    )\n}","import React from 'react'\nimport { TableBody, Table, TableHead, TableCell, TableRow, TableContainer } from '@material-ui/core';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\n\nimport { ListItemTest } from './ListItemtest';\n\nexport interface Field {\n    name: string\n    keyName: string\n}\n\n\ninterface Props {\n    fields: Field[]\n    data: any[]\n    onEditClicked: (entity: any) => void \n    onDeleteClicked: (entity: any) => void  \n}\n\nexport const TableList: React.FC<Props> = (props) => {\n\n  \n    if(props.data){\n        return( \n            <TableContainer>        \n            <Table>      \n                <TableHead>\n                    <TableRow>\n                        {props.fields.map(field => {\n                        return <TableCell key={field.keyName}>{field.name}</TableCell>\n                        })\n                        }\n                        <TableCell key={\"editaction\"}>{\"Bearbeiten\"}</TableCell>\n                        <TableCell key={\"deleteaction\"}>{\"\"}</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.data.map(x => {\n                    return (              \n                        <ListItemTest\n                            key={x.id}\n                            rowData={x}\n                            fields={props.fields}\n                            onDeleteClicked={props.onDeleteClicked} \n                            onEditClicked={props.onEditClicked}/>\n                        )                \n                    })}\n                </TableBody>   \n            </Table>\n            </TableContainer>      \n        )\n    }\n\n    return (\n        <LoadingAnimation message={'Daten werden geladen'}/>  \n    )\n}","import { Sight } from \"../../../generated/graphql\";\nimport { Field } from \"../lists/TableList\";\n\nexport const newSight: Sight = { \n    id: \"\",\n    title: \"\",\n    creationDate: \"\",\n    subtext: \"\",\n    location: \"\",\n    type: \"\",\n    lat: 0.0,\n    long: 0.0,\n    images: [],   \n}\n\nexport const formatSight = (sight: Sight) => {\n\n    sight.__typename = undefined;\n    sight.lat = parseFloat(sight.lat+\"\");\n    sight.long = parseFloat(sight.long+\"\");\n\n    return sight;\n}\n\nexport const SightFields: Field[] = [\n    {\n        name: \"ID\",\n        keyName: \"id\"\n    },\n    {\n        name: \"Name\",\n        keyName: \"title\"\n    },\n    {\n        name: \"Subtext\",\n        keyName: \"subtext\"\n    },\n    {\n        name: \"Ort\",\n        keyName: \"location\"\n    },\n    {\n        name: \"Kathegorie\",\n        keyName: \"type\"\n    },\n\n]\n","import React from 'react'\nimport { useSightsQuery} from '../../../generated/graphql'\nimport { Container, Button } from '@material-ui/core';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { ListItem } from '../lists/ListItem';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport { TableList } from '../lists/TableList';\nimport { SightFields } from './SightObject';\n\ninterface Props {\n}\n\nexport const SightList: React.FC<Props> = (props) => {\n\n    const {data, loading, error} = useSightsQuery();\n    const {path} = useRouteMatch();\n\n    const history = useHistory();\n\n\n    if(loading){\n        return (\n            <LoadingAnimation message={'Daten werden geladen'}/>\n        )\n    }\n\n    if(error){\n        return (\n            <ErrorMessage error={error} show={true}/>\n        )\n    }\n\n    const onEntityEdit = (id: any) => {\n        history.push( path + '/' + id);\n        console.log(id)\n    }\n\n    const onEntityDelete = (id: any) => {\n\n    }\n\n    const onNewEntityClicked = () => {\n        onEntityEdit(0);\n    } \n\n    if(data && data.getAllSights){\n        return(\n            <Container>\n                <TableList \n                    fields={SightFields} \n                    data={data.getAllSights}\n                    onDeleteClicked={onEntityDelete}\n                    onEditClicked={onEntityEdit}></TableList>  \n                <Button onClick={onNewEntityClicked}>Neuer Interessanter Ort</Button>\n            </Container> \n        )\n\n    }\n\n    return (\n        <LoadingAnimation message={'Daten werden geladen'}/>  \n    )\n}","import React, { useState } from 'react'\nimport { Sight, useGetSightQuery, useCreateSightMutation} from '../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatSight, newSight } from './SightObject';\nimport { SIGHT_IMAGE_UPLOAD_URL } from '../../../config';\n\n\ninterface Props {\n    \n}\n\nexport const SightEditor: React.FC<Props> = (props) => {\n\n    const { sightId } = useParams()\n\n    const [showMessage, setshowMessage] = useState(false);\n    const {data, error} = useGetSightQuery({\n        variables: {\n            id: sightId ? sightId : \"0\"\n        }\n    });\n    \n    const [saveSight] = useCreateSightMutation();\n\n    async function onSubmit(values: Sight) {     \n        var result = await saveSight({\n            variables: {\n                sight: formatSight(values)\n            }\n        });\n        if(result){\n            setshowMessage(true)\n        }\n    }\n\n    \n    if((data && data.getSight) || (sightId === \"0\")) {\n        var sight = newSight;\n        if(data?.getSight){\n            sight = data.getSight;\n        }\n        \n        return(\n            <Editor \n                entity={sight} \n                store={onSubmit} \n                entityId={sight.id}\n                imageuploadurl={SIGHT_IMAGE_UPLOAD_URL}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}","import React from 'react'\nimport { useUsersQuery} from '../../../generated/graphql'\nimport { TableBody, Table, Container, Button } from '@material-ui/core';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { ListItem } from '../lists/ListItem';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\ninterface Props {\n}\n\nexport const UserList: React.FC<Props> = (props) => {\n\n    const {data, loading, error} = useUsersQuery();\n    const {path} = useRouteMatch();\n\n    const history = useHistory();\n\n\n    if(loading){\n        return (\n            <LoadingAnimation message={'Daten werden geladen'}/>\n        )\n    }\n\n    if(error){\n        return (\n            <ErrorMessage error={error} show={true}/>\n        )\n    }\n\n    const onEntityEdit = (id: any) => {\n        // history.push( path + '/' + id);\n        // console.log(id)\n    }\n\n    const onEntityDelete = (id: any) => {\n\n    }\n\n    const onNewEntityClicked = () => {\n        // onEntityEdit(0);\n    } \n\n    if(data && data.users){\n        return(\n            <Container>\n                <Table>      \n                    <TableBody>\n                        {data?.users.map(x => {\n                        return (              \n                            <ListItem\n                                key={x.id} \n                                onEditClicked={onEntityEdit} \n                                onDeletClicked={onEntityDelete} \n                                id={x.id}\n                                title={x.email || \"\"}\n                                tagone={\"\"}\n                                tagtwo={\"\"}\n                                tagthree={\"\"} />\n                            )                \n                        })}\n                    </TableBody>\n                </Table> \n                <Button onClick={onNewEntityClicked}>Neuer Nutzer</Button>\n            </Container> \n        )\n\n    }\n\n    return (\n        <LoadingAnimation message={'Daten werden geladen'}/>  \n    )\n}","import React from 'react'\nimport { useAllBookingsQuery} from '../../../generated/graphql'\nimport { TableBody, Table, Container, Button } from '@material-ui/core';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { ListItem } from '../lists/ListItem';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\ninterface Props {\n}\n\nexport const BookingList: React.FC<Props> = (props) => {\n\n    const {data, loading, error} = useAllBookingsQuery();\n\n    if(loading){\n        return (\n            <LoadingAnimation message={'Daten werden geladen'}/>\n        )\n    }\n\n    if(error){\n        return (\n            <ErrorMessage error={error} show={true}/>\n        )\n    }\n\n    const onEntityEdit = (id: any) => {\n        // history.push( path + '/' + id);\n        // console.log(id)\n    }\n\n    const onEntityDelete = (id: any) => {\n\n    }\n\n    const onNewEntityClicked = () => {\n        // onEntityEdit(0);\n    } \n\n    if(data && data.getAllBookings){\n        return(\n            <Container>\n                <Table>      \n                    <TableBody>\n                        {data?.getAllBookings.map(x => {\n                        \n                        const arrival = x.dateOfArrival ? x.dateOfArrival : \"\"\n                        const departure = x.dateOfDeparture ? x.dateOfDeparture : \"\"\n\n\n                        return (              \n                            <ListItem\n                                key={x.id} \n                                onEditClicked={onEntityEdit} \n                                onDeletClicked={onEntityDelete} \n                                id={x.id+\"\"}\n                                title={x.propertyId + \"\"}\n                                tagone={(new Date(arrival)).toUTCString()}\n                                tagtwo={(new Date(departure)).toUTCString()}\n                                tagthree={\"\"} />\n                            )                \n                        })}\n                    </TableBody>\n                </Table> \n                <Button onClick={onNewEntityClicked}>Neuer Nutzer</Button>\n            </Container> \n        )\n\n    }\n\n    return (\n        <LoadingAnimation message={'Daten werden geladen'}/>  \n    )\n}","import { Rating } from \"../../../generated/graphql\";\nimport { Field } from \"../lists/TableList\";\n\nexport const newRating: Rating = { \n    id: \"\",\n    userId: 0,\n    creationDate: \"\",\n    rating: 2.5,\n    title: \"testtitle\",\n    targetId: 0,\n    comment: \"ich bin zufrieden\"\n}\n\nexport const RatingFields: Field[] = [\n        {\n            name: \"ID\",\n            keyName: \"id\"\n        },\n        {\n            name: \"Nutzer ID\",\n            keyName: \"userId\"\n        },\n        {\n            name: \"Bewertung\",\n            keyName: \"rating\"\n        },\n        {\n            name: \"Title\",\n            keyName: \"title\"\n        },\n        {\n            name: \"Object\",\n            keyName: \"targettype\"\n        },\n    ]\n    \n\n\nexport const formatRating = (rating: Rating) => {\n\n    rating.__typename = undefined;\n    rating.userId = parseFloat(rating.userId+\"\");\n    rating.rating = parseFloat(rating.rating+\"\");\n    rating.targetId = parseFloat(rating.targetId+\"\");\n\n    return rating;\n}","import React from 'react'\nimport { useAllRatingsQuery} from '../../../generated/graphql'\nimport { Container, Button } from '@material-ui/core';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport { TableList } from '../lists/TableList';\nimport { RatingFields } from './RatingObject';\n\ninterface Props {\n}\n\nexport const RatingList: React.FC<Props> = (props) => {\n\n    const {data, loading, error} = useAllRatingsQuery();\n    const {path} = useRouteMatch();\n\n    const history = useHistory();\n\n\n    if(loading){\n        return (\n            <LoadingAnimation message={'Daten werden geladen'}/>\n        )\n    }\n\n    if(error){\n        return (\n            <ErrorMessage error={error} show={true}/>\n        )\n    }\n\n    const onEntityEdit = (id: any) => {\n        history.push( path + '/' + id);\n        console.log(id)\n    }\n\n    const onEntityDelete = (id: any) => {\n        return\n    }\n\n    const onNewEntityClicked = () => {\n        onEntityEdit(0);\n    } \n\n\n    if(data && data.getAllRatings){\n        return(\n            <Container>\n                <TableList \n                    fields={RatingFields} \n                    data={data.getAllRatings} \n                    onDeleteClicked={onEntityDelete} \n                    onEditClicked={onEntityEdit}/>  \n                <Button onClick={onNewEntityClicked}>Neuer Interessanter Ort</Button>\n            </Container> \n        )\n\n    }\n\n    return (\n        <LoadingAnimation message={'Daten werden geladen'}/>  \n    )\n}","import React, { useState } from 'react'\nimport { useGetRatingQuery, useSaveRatingMutation, Rating } from '../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatRating, newRating } from './RatingObject';\nimport { PROPERTY_IMAGE_UPLOAD_URL } from '../../../config';\n\n\ninterface Props {\n    \n}\n\nexport const RatingEditor: React.FC<Props> = (props) => {\n\n    const { ratingId } = useParams()\n\n    const [showMessage, setshowMessage] = useState(false);\n    const {data, error, refetch} = useGetRatingQuery({\n        variables: {\n            id: ratingId ? ratingId : \"\"\n        }\n    });\n    \n    const [saveRating] = useSaveRatingMutation();\n\n    async function onSubmit(values: Rating) {     \n        var result = await saveRating({\n            variables: {\n                rating: formatRating(values)\n            }\n        });\n        if(result){\n            setshowMessage(true)\n        }\n    }\n\n    \n    if((data && data.getRating) || (ratingId == \"0\")) {\n        var rating = newRating;\n        if(data?.getRating){\n            rating = data.getRating;\n        }\n        \n        return(\n            <Editor \n                entity={rating} \n                store={onSubmit} \n                entityId={rating.id}\n                imageuploadurl={PROPERTY_IMAGE_UPLOAD_URL}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}","import { Product } from \"../../../generated/graphql\";\nimport { Field } from \"../lists/TableList\";\n\nexport const newProduct: Product = { \n    id: \"\",\n    title: \"\",\n    creationDate: new Date(Date.now()).toDateString(),\n    paymentPricePlan: \"\",\n    price: 0.0,\n    minmonth: 0,\n    active: true, \n}\n\nexport const formatProduct = (product: Product) => {\n\n    product.__typename = undefined;\n    product.price = parseFloat(product.price+\"\");\n    product.minmonth = parseFloat(product.minmonth + \"\")\n    product.creationDate = new Date(product.creationDate).toDateString()\n\n    console.log(JSON.stringify(product))\n\n    return product;\n}\n\nexport const ProductFields: Field[] = [\n    {\n        name: \"ID\",\n        keyName: \"id\"\n    },\n    {\n        name: \"Name\",\n        keyName: \"title\"\n    },\n    {\n        name: \"Preis\",\n        keyName: \"price\"\n    },\n    {\n        name: \"Payment_ID\",\n        keyName: \"paymentPricePlan\"\n    },\n    {\n        name: \"Mindestlaufzeig\",\n        keyName: \"minmonth\"\n    },\n    {\n        name: \"Aktive\",\n        keyName: \"active\"\n    },\n\n]","import React from 'react'\nimport { useProductsQuery, useDeleteProductMutation} from '../../../generated/graphql'\nimport { Container, Button } from '@material-ui/core';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport { TableList } from '../lists/TableList';\nimport { ProductFields } from './ProductObject';\n\ninterface Props {\n}\n\nexport const ProductList: React.FC<Props> = (props) => {\n\n    const {data, loading, error} = useProductsQuery();\n    const [deleteProduct] = useDeleteProductMutation()\n    const {path} = useRouteMatch();\n\n    const history = useHistory();\n\n\n    if(loading){\n        return (\n            <LoadingAnimation message={'Daten werden geladen'}/>\n        )\n    }\n\n    if(error){\n        return (\n            <ErrorMessage error={error} show={true}/>\n        )\n    }\n\n    const onProductEdit = (entity: any) => {\n        history.push( path + '/' + entity.id);\n        console.log(entity.id)\n    }\n\n    const onProductDelete = (entity: any) => {\n        const result = deleteProduct(\n            {\n                variables: {\n                    id: entity.id\n                }\n            }\n        )\n        console.log(result)\n    }\n\n    const onNewPropertyClicked = () => {\n        history.push( path + '/' + \"new\");\n        // onProductEdit(\"new\");\n    } \n\n    if(data && data.getAllProducts){\n        return(\n            <Container>\n                <TableList \n                    fields={ProductFields} \n                    data={data.getAllProducts}\n                    onDeleteClicked={onProductDelete}\n                    onEditClicked={onProductEdit}></TableList>  \n                <Button onClick={onNewPropertyClicked}>Neues Product</Button>\n        </Container> \n        )\n\n    }\n\n    return (\n        <LoadingAnimation message={'Daten werden geladen'}/>  \n    )\n}","import React, { useState } from 'react'\nimport { Product, useUpdateProductMutation, useCreateProductQuery} from '../../../generated/graphql'\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatProduct } from './ProductObject';\nimport { PROPERTY_IMAGE_UPLOAD_URL } from '../../../config';\n\n\ninterface Props {\n    \n}\n\nexport const EditNewProperty: React.FC<Props> = (props) => {\n\n    const [showMessage, setshowMessage] = useState(false);\n  \n    const {data, error} = useCreateProductQuery();\n    const [updateProduct] = useUpdateProductMutation();\n\n    async function onSubmit(values: Product) {     \n        var result = await updateProduct({\n            variables: {\n                product: formatProduct(values)\n            }\n        });\n        if(result){\n            setshowMessage(true)\n            // history.push(\"/admin#/properties\")\n        }\n    }\n\n    \n    if(data && data.getNewProduct) {\n        const product = data.getNewProduct;     \n        return(\n            <Editor \n                entity={product} \n                store={onSubmit} \n                entityId={product.id}\n                imageuploadurl={PROPERTY_IMAGE_UPLOAD_URL}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}","import React, { useState } from 'react'\nimport { useGetProductQuery, Product, useUpdateProductMutation, useCreateProductQuery} from '../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatProduct, newProduct } from './ProductObject';\nimport { PROPERTY_IMAGE_UPLOAD_URL } from '../../../config';\n\n\ninterface Props {\n    id: string\n}\n\nexport const EditProperty: React.FC<Props> = (props) => {\n\n    const [showMessage, setshowMessage] = useState(false);\n    \n        const {data, error} = useGetProductQuery({\n            variables: {\n                id: props.id\n            }\n        });\n        \n    \n    const [updateProduct] = useUpdateProductMutation();\n\n    async function onSubmit(values: Product) {     \n        var result = await updateProduct({\n            variables: {\n                product: formatProduct(values)\n            }\n        });\n        if(result){\n            setshowMessage(true)\n            // history.push(\"/admin#/properties\")\n        }\n    }\n\n    \n    if(data && data.getProduct) { \n        const product = data.getProduct;    \n        return(\n            <Editor \n                entity={product} \n                store={onSubmit} \n                entityId={product.id}\n                imageuploadurl={PROPERTY_IMAGE_UPLOAD_URL}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}","import React, { useState } from 'react'\nimport { useGetProductQuery, Product, useUpdateProductMutation, useCreateProductQuery} from '../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { EditNewProperty } from './EditNewProperty';\nimport { EditProperty } from './EditProperty';\n\n\ninterface Props {\n    \n}\n\nexport const ProductEditor: React.FC<Props> = (props) => {\n\n    const { id } = useParams()\n \n    if(id == \"new\"){\n        return (<EditNewProperty></EditNewProperty>)\n    } else {\n        if(id){\n            return (<EditProperty id={id}/>)\n        } \n    }\n    return (<div>Wrong ID </div>)\n}","import React from 'react'\nimport { Route, NavLink, HashRouter } from 'react-router-dom';\nimport { PropertyList } from '../properties/PropertyList';\nimport { PropertyEditor } from '../properties/PropertyEditor';\nimport './AdminMenue.css'\nimport { SightList } from '../sights/SightList';\nimport { SightEditor } from '../sights/SightEditor';\nimport { UserList } from '../user/UserList';\nimport { BookingList } from '../bookings/BookingList';\nimport { RatingList } from '../ratings/RatingList';\nimport { RatingEditor } from '../ratings/RatingEditor';\nimport { ProductList } from '../products/ProductList';\nimport { ProductEditor } from '../products/PropertyEditor';\n\ninterface Props {\n    \n}\n\nexport const AdminMenu: React.FC<Props> = () => {\n\n    return(\n        <HashRouter>\n            <div>\n                <ul className=\"header\">\n                    <li><NavLink to={`/properties`}>Wochenendgrundstück</NavLink></li>\n                    <li><NavLink to={`/product`}>Producte</NavLink></li>\n                    <li><NavLink to={`/sights`}>Sehenswertes</NavLink></li>\n                    <li><NavLink to={`/user`}>Nutzer</NavLink></li>\n                    <li><NavLink to={`/bookings`}>Buchungen</NavLink></li>\n                    <li><NavLink to={`/ratings`}>Bewertungen</NavLink></li>\n                </ul>\n\n                <div className='content'> \n                        <Route exact path={`/`} component={PropertyList} />      \n                        <Route exact path={`/properties`} component={PropertyList} />\n                        <Route exact path={`/product`} component={ProductList} />\n                        <Route exact path={`/sights`} component={SightList} />\n                        <Route exact path={`/user`} component={UserList} />\n                        <Route exact path={`/bookings`} component={BookingList} />\n                        <Route exact path={`/ratings`} component={RatingList} />\n                        <Route path={`/properties/:propertyId`} component={PropertyEditor} />\n                        <Route path={`/sights/:sightId`} component={SightEditor} />\n                        <Route path={`/ratings/:ratingId`} component={RatingEditor} />\n                        <Route path={`/product/:id`} component={ProductEditor} />\n                </div>\n            </div>\n        </HashRouter>\n    )\n}","import { getAccessToken } from \"../../accessToken\";\nimport jwtDecode from 'jwt-decode';\n\n\nexport const checkAuth = () => {\n    const token = getAccessToken()\n\n    console.log(\"AccessToken: \"+token)\n\n    if(token){\n        const {exp} = jwtDecode(token)\n        if(Date.now() >= exp * 1000){\n            return false;\n        } else {\n            return true;\n        }\n    } else {\n        return false\n    }\n}","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { checkAuth } from './AuthService';\n\n\ntype MyProps = {\n    path: string\n    component: React.FunctionComponent\n}\ntype MyState = {\n    isLoading: boolean\n    isLoggedIn: boolean\n}\n\nexport class ProtectedRoute extends React.Component<MyProps, MyState> {\n    constructor(props: MyProps, context: any){\n      super (props, context)\n      this.state = {\n        isLoading: true,\n        isLoggedIn: checkAuth()\n      }      \n    }\n \n    render() {\n      return this.state.isLoggedIn ? \n        <Route path={this.props.path} component={this.props.component} /> \n        : <Redirect to={\"/login\"}/>\n    }\n       \n}\n\n","import React, { useState, useCallback } from \"react\";\nimport { Product } from \"../../generated/graphql\";\nimport { PaymentMethod } from \"@stripe/stripe-js\";\n\n\ntype Address = {\n    street:  string, \n    number: number, \n    postalCode: string, \n    city: string }\n\ntype PersonData = {\n    firstName: string,\n    surname: string,\n    phoneNumber: string\n}\n\n\ntype CheckoutCtxt = {\n    product: Product | undefined\n    paymentMethod: PaymentMethod | undefined\n    address: Address | undefined\n    personData: PersonData | undefined\n    setProduct: (product: Product) => void \n    setAddress: (address: Address) => void\n    setPersonData: (personData: PersonData) => void\n    setPaymentMethod: (product: PaymentMethod) => void \n}\n\nexport const initialCheckoutCtxt: CheckoutCtxt = {\n    product: undefined,\n    paymentMethod: undefined,\n    address: undefined,\n    personData: undefined,\n    setProduct: (product: Product) => {},\n    setAddress: (address: Address) => {},\n    setPersonData: (personData: PersonData) => {},\n    setPaymentMethod: (product: PaymentMethod) => {}\n}\n\nexport const CheckoutContext = React.createContext<CheckoutCtxt>(initialCheckoutCtxt);\n\nexport const CheckoutContextProvider: React.FC = (props) => {\n\n    const [product, setpproduct] = useState()\n    const [paymentMethod, setpaymentMethod] = useState()\n    const [address, setaddress] = useState()\n    const [personData, setpersonData] = useState()\n\n \n\n    const setProduct = useCallback((product: Product): void => {\n        setpproduct(product);\n    },[])\n\n    const setPaymentMethod = useCallback((paymentMethod: PaymentMethod): void => {\n        setpaymentMethod(paymentMethod);\n    },[])\n\n    const setAddress = useCallback((address: Address): void => {\n        setaddress(address);\n    },[])\n\n    const setPersonData = useCallback((personData: PersonData): void => {\n        setpersonData(personData);\n    },[])\n\n   const initValue = initialCheckoutCtxt;\n    initValue.product = product;\n    initValue.paymentMethod = paymentMethod;\n    initValue.address = address;\n    initValue.personData = personData;\n    initValue.setProduct = setProduct;\n    initValue.setPaymentMethod = setPaymentMethod;\n    initValue.setAddress = setAddress;\n    initValue.setPersonData = setPersonData\n\n   return (\n        <CheckoutContext.Provider value={initValue}> \n            {props.children}\n        </CheckoutContext.Provider>\n    )\n}\n","import React, { useState, createContext } from \"react\";\nimport { number } from \"yup\";\nimport { setServers } from \"dns\";\n\ninterface StepContext {\n    step: number\n    setstep:  (step: number) => void;\n}\n\nconst initValue: StepContext = {\n    step: 0,\n    setstep: (step: number) => {}\n}\n\nexport const CheckoutStepContext = createContext(initValue);\n\nexport const CheckoutStepContextProvider: React.FC = (props) => {\n\nconst [step, setstep] = useState(0)\n\nconst setNextStep = (nextStep: number) => {\n    console.log(nextStep)\n    setstep(nextStep)\n} \n\n   return (\n        <CheckoutStepContext.Provider value={{step, setstep: setNextStep}}> \n            {props.children}\n        </CheckoutStepContext.Provider>\n    )\n}\n","import React, { useContext } from \"react\";\nimport { Stepper, Step, StepButton } from \"@material-ui/core\";\nimport { CheckoutStepContext } from \"../../context/checkoutcontext/CheckoutStepContext\";\n\ninterface Props {\n    stepLabels: string[]\n}\n  \n\nexport const CheckOutNavigation: React.FC<Props> = (props) => {\n    const {step, setstep} = useContext(CheckoutStepContext)\n    const handleStepClicked = (index: number) => () => {\n        setstep(index)\n    }    \n\n   return (\n    <Stepper activeStep={step} orientation=\"vertical\">\n  \n    {props.stepLabels.map((label, index) => {\n\n        const stepProps = {};\n        const buttonProps = {};\n       return (<Step key={label} {...stepProps}>\n                <StepButton\n                    onClick={handleStepClicked(index)}\n                    completed={step > index ? true : false}\n                    {...buttonProps}\n                >\n                     {label}\n                </StepButton>\n  \n        </Step>)\n    })}\n  </Stepper>\n    )\n}","import React, { ReactNodeArray, useContext, useEffect, useState } from \"react\";\nimport { CheckoutContext } from \"../../context/checkoutcontext/CheckoutContext\";\nimport styles from \"./CheckOutFlow.module.css\"\nimport { CheckOutNavigation } from \"../../components/checkoutnavigation/CheckOutNavigation\";\nimport { CheckoutStepContext } from \"../../context/checkoutcontext/CheckoutStepContext\";\n\n\n\ninterface Props {\n     children: ReactNodeArray\n     steps: string[]\n     \n}\n\nexport const CheckOutFlow: React.FC<Props> = (props) => {\n    const children = props.children;\n    const {step, setstep} = useContext(CheckoutStepContext)\n\n\n   return (\n        <div className={styles[\"checkout-frame\"]}>\n            <div className={styles[\"checkout-content\"]}>\n            {children[step]}\n            </div>\n            <div className={styles[\"checkout-nav\"]}>\n                <CheckOutNavigation stepLabels={props.steps}/>\n            </div>\n        </div> \n    )\n}","import React from \"react\";\nimport { BasicContentBox } from \"../../pages/pageframe/global/StyledComponents\";\nimport { Typography} from \"@material-ui/core\";\nimport styles from \"./ListSection.module.css\"\n\n\nexport type SummarySectionData = {\n    value: any\n    label: string\n}\n\ninterface Props {\n    sectionHeader: string\n    data: SummarySectionData[]\n}\n\nexport const ListSection: React.FC<Props> = (props) => {\n\n  return (\n    <BasicContentBox>\n      <Typography variant=\"h6\">\n          {props.sectionHeader}\n      </Typography>\n      <table>\n       { props.data.map((d) => {\n          return (\n            <tr className={styles.listrow}>\n              <td className={styles.label}>{d.label}</td> \n              <td className={styles.value}> {d.value} </td>\n            </tr>\n          )\n        })}\n      </table>\n    </BasicContentBox>\n  );\n};","import React, { useContext } from \"react\";\nimport { CheckoutContext } from \"../../context/checkoutcontext/CheckoutContext\";\nimport { BasicContentBox } from \"../../pages/pageframe/global/StyledComponents\";\nimport { SummarySectionData, ListSection } from \"../../components/datalistsection/ListSection\";\nimport { Typography } from \"@material-ui/core\";\n\n\n\ninterface Props {\n     \n}\n\nexport const CheckoutSummary: React.FC<Props> = () => {\n\n    const {address, product, paymentMethod, personData} = useContext(CheckoutContext)\n\n    const productData: SummarySectionData[] = [\n        {\n            label: \"Bezeichnung\",\n            value: product?.title\n        },\n        {\n            label: \"Mindestvertragslaufzeit\",\n            value: product?.minmonth + \" Monate\"\n        },\n        {\n            label: \"Monatliche Gebühr\",\n            value: product?.price + \" €\"\n        } \n        ]\n\n    const paymentData: SummarySectionData[] = [\n            {\n                label: \"Kreditkarte\",\n                value: paymentMethod?.card?.brand\n            },\n            {\n                label: \"Kartennummer\",\n                value: \"**** **** **** \"+paymentMethod?.card?.last4\n            },\n            ]\n\n\n  return (\n    <BasicContentBox>\n        <Typography variant=\"h3\">\n            Zusammenfassung\n        </Typography>\n        <ListSection data={productData} sectionHeader={\"Product\"}/>\n        <ListSection data={paymentData} sectionHeader={\"Zahlungsmittel\"}/>\n    </BasicContentBox>\n  );\n};","\nimport React, { useState, useContext } from \"react\";\nimport { CardElement, useStripe, useElements, CardCvcElement, CardNumberElement, CardExpiryElement} from \"@stripe/react-stripe-js\";\nimport { Button } from \"@material-ui/core\";\nimport { ErrorMessage } from \"../../pages/pageframe/global/Messages/ErrorMessage\";\nimport { CheckoutContext } from \"../../context/checkoutcontext/CheckoutContext\";\nimport styles from \"./PaymentForm.module.css\"\nimport { CheckoutStepContext } from \"../../context/checkoutcontext/CheckoutStepContext\";\n\n\ninterface Props {\n   onDone: () => void  \n}\n\n\nconst style =  {\n    base: {\n      backgroundColor: '#ffffff',\n      padding: 10,\n      fontSize: '22px',\n      color: '#424770',\n      '::placeholder': {\n        color: '#aab7c4',\n      },\n    },\n    invalid: {\n      color: '#9e2146',\n    }\n}\n  \n\nexport const PaymentForm: React.FC<Props> = (props) => {\n\n    const stripe = useStripe();\n    const elements = useElements();\n    const context = useContext(CheckoutContext);\n\n    const [error, seterror] = useState()\n    const [success, setsuccess] = useState()\n\n\n    const handleSubmit = async (event: React.FormEvent) => {\n        // Block native form submission.\n        event.preventDefault();\n    \n        if (!stripe || !elements) {\n          seterror(new Error('Bazahldienst nicht erreichbar'));\n          return;\n        }\n    \n        // Get a reference to a mounted CardElement. Elements knows how\n        // to find your CardElement because there can only ever be one of\n        // each type of element.\n        const cardElement = elements.getElement(CardNumberElement);\n    \n        // Use your card Element with other Stripe.js APIs\n        const {error, paymentMethod} = await stripe.createPaymentMethod({\n          type: 'card',\n          card: cardElement ? cardElement : {token: \"\"},\n        });\n    \n        if (error) {\n          console.log('[error]', error);\n          seterror(error)\n        } \n        if(paymentMethod){\n          context.setPaymentMethod(paymentMethod);\n          props.onDone()\n        }        \n      };\n\n    return(\n      <div className={styles[\"payment-form\"]}>\n        <form onSubmit={handleSubmit} >\n\n\n            <div className={styles[\"payment-input-field\"]}>\n              <CardNumberElement options={{style}}/>\n            </div>\n            <div className={styles[\"payment-input-line\"]}>\n              <div style={{flex: 1}} className={styles[\"payment-input-field\"]}>\n                <CardExpiryElement options={{style}}/>\n              </div>\n              <div style={{flex: 1}} className={styles[\"payment-input-field\"]}>\n                <CardCvcElement options={{style}}/> \n              </div>\n            </div>\n            <Button style={{float: \"right\"}} color=\"primary\" variant=\"contained\" type=\"submit\" disabled={!stripe}>übernehmen</Button>\n            {error ? <ErrorMessage error={error} show={error ? true : false}/> : <div></div>}\n        </form>\n        </div>\n\n    )\n\n\n}","\nimport React, { useState } from \"react\";\nimport {Elements} from '@stripe/react-stripe-js';\nimport {loadStripe} from '@stripe/stripe-js';\nimport {PaymentForm} from './PaymentForm'\nimport { STRIPE_PUBLIC_KEY } from \"../../config\";\nimport { BasicContentBox } from \"../../pages/pageframe/global/StyledComponents\";\nimport { Typography, Tabs, Tab, ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails } from \"@material-ui/core\";\nimport { ExpandMore } from \"@material-ui/icons\";\n\n// Make sure to call `loadStripe` outside of a component’s render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = loadStripe(STRIPE_PUBLIC_KEY);\ninterface Props {\n     onDone: () => void\n}\n\nexport const Payment: React.FC<Props> = (props) => {\n\nconst [expanded, setExpanded] = useState('panel1')\n\n\nconst handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\n  setExpanded(isExpanded ? panel : \" \");\n};\n\n  return (\n    <BasicContentBox>\n      <Typography variant=\"h6\">\n          Zahlungsart\n      </Typography>\n      <Elements stripe={stripePromise}>\n      <ExpansionPanel expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMore/>}\n          aria-controls=\"panel1bh-content\"\n          id=\"panel1bh-header\"\n        >\n          <Typography >Kreditkarte</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n            <PaymentForm onDone={props.onDone}/>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n      <ExpansionPanel expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMore/>}\n          aria-controls=\"panel2bh-content\"\n          id=\"panel2bh-header\"\n        >\n          <Typography >SEPA Lastschrift</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Typography>\n          </Typography>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n        \n      </Elements>\n    </BasicContentBox>\n  );\n};","import React from 'react'\nimport { Button} from '@material-ui/core'\nimport styles from './SubmitButton.module.css'\n\ninterface Props {\n    label: string\n}\n\nexport const SubmitButton: React.FC<Props> = (props) => {\n    return (\n        <div className={styles.button_field}>\n            <Button variant=\"outlined\" type=\"submit\">\n                {props.label}\n            </Button>\n        </div>\n    )\n}\n","import React from 'react'\nimport { Button, TextField, Grid } from '@material-ui/core'\nimport {useFormik, FormikBag} from 'formik'\nimport styles from \"./AddressForm.module.css\"\nimport * as Yup from 'yup'\nimport { SubmitButton } from '../formsubmitbutton'\n\n\nexport interface Address {\n    streetName: string\n    streetNumber: string\n    postalCode: string\n    town: string\n}\n\ninterface Props {\n    values: Address;\n    onSubmit: (values: Address) => void;\n}\n\nexport const AddressForm: React.FC<Props> = (props) => {\n\n    const values = props.values;\n\n    const formik = useFormik({\n        initialValues: values, \n        onSubmit: values => {\n            props.onSubmit(values);\n          },\n    })\n    return (\n        <form onSubmit={formik.handleSubmit}>\n                <div className={styles.row_elements}>\n                    <TextField\n                    style={{flex: 1}}\n                    id={\"streetName\"} \n                    name={\"streetName\"}\n                    label={\"Straße\"}\n                    value={formik.values.streetName} \n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    />\n                    <TextField \n                    style={{width: \"80px\", marginLeft: \"40px\"}}\n                    id={\"streetNumber\"}\n                    name={\"streetNumber\"}\n                    label={\"Nr.\"}\n                    value={formik.values.streetNumber} \n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}/>\n                </div>\n                <div className={styles.row_elements}>\n                    <TextField \n                    style={{width: \"80px\"}}\n                    name={\"postalCode\"}\n                    label={\"PLZ\"}\n                    id={\"postalCode\"}\n                    value={formik.values.postalCode} \n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    />\n                    <TextField \n                    style={{flex: 1, marginLeft: \"40px\"}}\n                    id={\"town\"}\n                    name={\"town\"}\n                    label={\"Ort\"}\n                    value={formik.values.town} \n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}/>\n                </div> \n\n            <SubmitButton label={\"Übernehmen\"} />    \n            \n            </form>   \n    )\n}\n","import React, { useState } from \"react\";\nimport { Address, AddressForm } from \"../../components/addressform\";\nimport { useMeQuery} from \"../../generated/graphql\";\nimport { ErrorMessage } from \"../../pages/pageframe/global/Messages/ErrorMessage\";\nimport { LoadingAnimation } from \"../../pages/pageframe/global/Messages/LoadingAnimation\";\nimport { SuccessMessage } from \"../../pages/pageframe/global/Messages/SucessMessage\";\n\ninterface Props {\n    onDone: () => void\n}\n\nexport const AddressEditor: React.FC<Props> = (props) => {\n\n    const {data, loading, error} = useMeQuery();\n    const [addressUpdated, setaddressUpdated] = useState(false)\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>)\n    }\n\n    const handleSaveAddress = async (address: Address) => {\n\n        console.log(\"onSubmit :\"+ JSON.stringify(address))\n       /* TODO\n        const result = await useraddress({\n            variables: {\n                useraddress: address\n            }\n        })\n        \n        if(result){\n            setaddressUpdated(true)\n             \n        } else {\n            console.log(\"onSubmit : false\")\n        }\n        */\n       props.onDone()\n    }\n\n    if(data && data.me){\n        const user = data.me;\n\n        const address: Address = {\n            streetName: user.street ? user.street : \"\",\n            streetNumber: user.streetNumber ? user.streetNumber : \"\",\n            postalCode: user.postalcode ? user.postalcode : \"\",\n            town: user.town ? user.town : \"\" \n        }\n\n\n        return (\n            <div>\n                <AddressForm values={address} onSubmit={handleSaveAddress}/>\n                <SuccessMessage response={\"Neue Adresse wurden gespeichert.\"} show={addressUpdated} /> \n            </div>\n        )\n    }\n    return (\n        <LoadingAnimation message={\"Daten werden geladen\"} />\n    )\n}\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { CheckoutContext, CheckoutContextProvider } from \"../../context/checkoutcontext/CheckoutContext\";\nimport { CheckOutFlow } from \"./CheckOutFlow\";\nimport { ProductOffers } from \"../productoffer/ProductOffers\";\nimport { CheckoutSummary } from \"../checkoutsummary/CheckoutSummary\";\nimport { Payment } from \"../../components/paymentformcard/Payment\";\nimport { AddressEditor } from \"../addresseditor\";\nimport { CheckoutStepContext, CheckoutStepContextProvider } from \"../../context/checkoutcontext/CheckoutStepContext\";\nimport { useGetProductQuery, Product } from \"../../generated/graphql\";\nimport { ErrorMessage } from \"../../pages/pageframe/global/Messages/ErrorMessage\";\n\n\ninterface Props {\n    productId: string | undefined | null\n}\n\nexport const CheckOutContainer: React.FC<Props> = (props) => {\n      \n    const {step, setstep} = useContext(CheckoutStepContext);    \n    const {setProduct} = useContext(CheckoutContext);\n\n    const productId = props.productId;\n\n    const product = useGetProductQuery({\n            variables: {\n                id: productId ? productId : \"\"\n            }\n        })\n\n    if(productId && product && product.data && product.data.getProduct){\n        setProduct(product.data.getProduct)\n    } else {\n        return <ErrorMessage error={new Error(\"Es ist kein Product ausgewählt.\")} show={true} />\n    }\n\n\n    const nextStep = () => {      \n        setstep(step + 1)\n        console.log(\"nextStep \" + step);\n    }\n\n    const steps = [\n        \"Adressdaten\",\n        \"Bezahldaten\",\n        \"Bestellung\",\n        \"Zusammenfassung\"\n    ]\n\n\n   return (      \n        <CheckOutFlow steps={steps}>\n            <AddressEditor onDone={nextStep}/>\n            <Payment onDone={nextStep}/>     \n            <CheckoutSummary />\n        </CheckOutFlow>\n    )\n}","import React from \"react\";\nimport { CheckOutContainer } from \"../../container/checkout/CheckoutContainer\";\nimport { CheckoutStepContextProvider } from \"../../context/checkoutcontext/CheckoutStepContext\";\nimport { useParams } from \"react-router-dom\";\nimport { CheckoutContextProvider } from \"../../context/checkoutcontext/CheckoutContext\";\n\n\ninterface Props {\n}\n\n\n\nexport const Onboarding: React.FC<Props> = (Props) => {\n\n    const {productId} = useParams()\n\n   return (\n        <CheckoutStepContextProvider>\n            <CheckoutContextProvider>\n                <CheckOutContainer productId={productId}/> \n            </CheckoutContextProvider> \n        </CheckoutStepContextProvider>    \n    )\n}","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport { RegisterFlow } from './global/user/register/RegisterFlow'\nimport { LoginSection } from './global/user/login/LoginSection'\nimport { Home } from '../homepage/Homepage'\nimport {BookingRouter } from '../booking/BookingRouter'\nimport { Header } from './header/Header';\nimport { Footer } from './footerarea/FooterArea';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core';\nimport { LoadingAnimation } from './global/Messages/LoadingAnimation';\nimport { AdminMenu } from '../admin/menu/AdminMenu';\nimport { ProtectedRoute } from './ProtectedRoute';\nimport { FOOTER_HEIGHT } from '../../config';\nimport { Onboarding } from '../checkout/Checkout';\n\ninterface Props {\n  serverConnected: boolean\n}\n\n\nexport const Routes: React.FC<Props> = (props) => {\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: '#4caf50'\n      },\n      secondary: {\n        main: '#0099FF'\n      },\n    },\n  });\n \n  if(props.serverConnected){\n    return (\n      \n        <BrowserRouter>\n          <ThemeProvider theme={theme}>   \n             <Header /> \n                <div style={{width: \"auto\", minWidth: \"100%\", paddingBottom: FOOTER_HEIGHT }}> \n                  <Switch>\n                    <Route exact path=\"/\" component={Home}></Route>\n                    <Route exact path=\"/register\" component={RegisterFlow}></Route>\n                    <Route exact path=\"/login\" component={LoginSection}></Route>\n                    <Route exact path=\"/booking\" component={BookingRouter}></Route>\n                    <Route exact path=\"/onboarding/:productId\" component={Onboarding}></Route>\n                  \n                    <ProtectedRoute path=\"/admin\" component={AdminMenu}/>   \n                  </Switch>\n                </div>  \n              <Footer />\n          </ThemeProvider>\n      </BrowserRouter>\n          \n  )}\n  \n  return ( \n            <LoadingAnimation message={'Verbindung zum Server wird hergestellt ...'}/>)\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ApolloProvider} from '@apollo/react-hooks'\nimport {App} from './App';\nimport { getAccessToken, setAccessToken } from './accessToken';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\nimport jwtDecode from 'jwt-decode';\nimport { BASE_BACKEND_URL } from './config';\n\nconst cache = new InMemoryCache({});\n\nconsole.log(BASE_BACKEND_URL);\n\nconst requestLink = new ApolloLink(\n    (operation, forward) => new Observable(observer => {\n    let handle: any;\n    Promise.resolve(operation)\n      .then((operation) => {\n            const accessToken = getAccessToken();\n            if(accessToken){\n                operation.setContext({\n                    headers: {\n                        authorization: `bearer ${accessToken}`\n                    } \n                })\n            }\n        }).then(() => {\n            handle = forward(operation).subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer)\n            });\n        })  \n      .catch(observer.error.bind(observer));\n\n    return () => {\n      if (handle) handle.unsubscribe();\n    };\n  })\n);\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    new TokenRefreshLink({\n        accessTokenField: \"accessToken\",\n        isTokenValidOrUndefined: () => {           \n            const token = getAccessToken();\n            if(!token){\n                return true; \n            } \n\n            try {\n                const {exp} = jwtDecode(token)\n                if(Date.now() >= exp * 1000){\n                    return false;\n                } else {\n                    return true;\n                }\n                \n            } catch (error) {\n                return false;\n            }\n        },\n\n        fetchAccessToken: () => {\n            console.log(\"fetch token \")\n            return fetch (BASE_BACKEND_URL +\"refresh_token\", {\n                method: \"POST\",\n                credentials: \"include\"\n            })\n        },\n        handleFetch: accessToken => {\n            setAccessToken(accessToken);\n        },\n\n        handleError: err => {\n            console.warn('Your refresh token is invalid. Try to relogin');\n        }\n      }),\n        onError(({ graphQLErrors, networkError }) => {\n        console.log(graphQLErrors);\n        console.log(networkError)\n    }),\n    requestLink,\n    new HttpLink({\n        uri: BASE_BACKEND_URL +'graphql',\n        credentials: 'include'\n    })\n  ]),\n  cache\n});\n\nReactDOM.render(\n    <ApolloProvider client={client} >\n        <App />\n    </ApolloProvider>, document.getElementById('root'));\n\n\n","import React, { useState, useEffect} from 'react'\nimport { Routes } from './pages/pageframe/Routes'\nimport { setAccessToken } from './accessToken';\nimport { ErrorMessage } from './pages/pageframe/global/Messages/ErrorMessage';\nimport { BASE_BACKEND_URL } from './config';\n\n\ninterface Props {\n}\n\ntype auth = {\n    isAuthenticated: () => boolean\n}\n\n\nexport const App: React.FC<Props> = () => {\n\n    const [isloading, setLoading] = useState(true);\n    const [failed, isFailed] = useState();\n\n    useEffect(() => {\n        fetch (BASE_BACKEND_URL +\"refresh_token\", {\n            method: \"POST\",\n            credentials: \"include\"\n        }).then(async x => {\n            const {accessToken} = await x.json();\n            setAccessToken(accessToken)\n            setLoading(false)\n            }\n        ).catch( error => {\n            isFailed(error)\n        }     \n        );\n    }, [])\n\n    if(failed){\n        return (         \n            <ErrorMessage error={failed}  show={true}/>   \n        );\n    }\n\n    if(isloading){\n        return (         \n            <Routes serverConnected={false}/>\n        );\n    }\n\n    return <Routes serverConnected={true}/>\n}\n\n\n\n"],"sourceRoot":""}